"use strict";(self.webpackChunkrapier_testbed3d=self.webpackChunkrapier_testbed3d||[]).push([[87],{8709:(t,e,r)=>{r.d(e,{F:()=>i});class i{constructor(){this.fconv=new Float64Array(1),this.uconv=new Uint32Array(this.fconv.buffer),this.data=new Array,this.size=0}set(t,e){let r=this.index(t);for(;this.data.length<=r;)this.data.push(null);null==this.data[r]&&(this.size+=1),this.data[r]=e}len(){return this.size}delete(t){let e=this.index(t);e<this.data.length&&(null!=this.data[e]&&(this.size-=1),this.data[e]=null)}clear(){this.data=new Array}get(t){let e=this.index(t);return e<this.data.length?this.data[e]:null}forEach(t){for(const e of this.data)null!=e&&t(e)}getAll(){return this.data.filter((t=>null!=t))}index(t){return this.fconv[0]=t,this.uconv[0]}}},8448:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{K:()=>s});var n=r(2184),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t){this.raw=t||new n.LE}free(){this.raw.free(),this.raw=void 0}}i()}catch(t){i(t)}}))},8042:(t,e,r)=>{var i;r.d(e,{j:()=>i}),function(t){t[t.Average=0]="Average",t[t.Min=1]="Min",t[t.Multiply=2]="Multiply",t[t.Max=3]="Max"}(i||(i={}))},9380:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{C1:()=>h,JW:()=>d,VH:()=>w,Vt:()=>a,_h:()=>_,au:()=>p,dl:()=>n,eZ:()=>u,s2:()=>l});var n,a,s=r(7383),o=r(2184),c=t([s,o]);[s,o]=c.then?(await c)():c,function(t){t[t.Revolute=0]="Revolute",t[t.Fixed=1]="Fixed",t[t.Prismatic=2]="Prismatic",t[t.Spherical=3]="Spherical"}(n||(n={})),function(t){t[t.AccelerationBased=0]="AccelerationBased",t[t.ForceBased=1]="ForceBased"}(a||(a={}));class l{constructor(t,e,r){this.rawSet=t,this.bodySet=e,this.handle=r}static newTyped(t,e,r){switch(t.jointType(r)){case n.Revolute:return new p(t,e,r);case n.Prismatic:return new u(t,e,r);case n.Fixed:return new d(t,e,r);case n.Spherical:return new w(t,e,r);default:return new l(t,e,r)}}finalizeDeserialization(t){this.bodySet=t}isValid(){return this.rawSet.contains(this.handle)}body1(){return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle))}body2(){return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle))}type(){return this.rawSet.jointType(this.handle)}frameX1(){return s.T3.fromRaw(this.rawSet.jointFrameX1(this.handle))}frameX2(){return s.T3.fromRaw(this.rawSet.jointFrameX2(this.handle))}anchor1(){return s.ut.fromRaw(this.rawSet.jointAnchor1(this.handle))}anchor2(){return s.ut.fromRaw(this.rawSet.jointAnchor2(this.handle))}}class h extends l{limitsEnabled(){return this.rawSet.jointLimitsEnabled(this.handle,this.rawAxis())}limitsMin(){return this.rawSet.jointLimitsMin(this.handle,this.rawAxis())}limitsMax(){return this.rawSet.jointLimitsMax(this.handle,this.rawAxis())}configureMotorModel(t){this.rawSet.jointConfigureMotorModel(this.handle,this.rawAxis(),t)}configureMotorVelocity(t,e){this.rawSet.jointConfigureMotorVelocity(this.handle,this.rawAxis(),t,e)}configureMotorPosition(t,e,r){this.rawSet.jointConfigureMotorPosition(this.handle,this.rawAxis(),t,e,r)}configureMotor(t,e,r,i){this.rawSet.jointConfigureMotor(this.handle,this.rawAxis(),t,e,r,i)}}class d extends l{}class u extends h{rawAxis(){return o.JM.X}}class p extends h{rawAxis(){return o.JM.AngX}}class w extends l{}class _{constructor(){}static fixed(t,e,r,i){let a=new _;return a.anchor1=t,a.anchor2=r,a.frame1=e,a.frame2=i,a.jointType=n.Fixed,a}static spherical(t,e){let r=new _;return r.anchor1=t,r.anchor2=e,r.jointType=n.Spherical,r}static prismatic(t,e,r){let i=new _;return i.anchor1=t,i.anchor2=e,i.axis=r,i.jointType=n.Prismatic,i}static revolute(t,e,r){let i=new _;return i.anchor1=t,i.anchor2=e,i.axis=r,i.jointType=n.Revolute,i}intoRaw(){let t,e,r=s.ut.intoRaw(this.anchor1),i=s.ut.intoRaw(this.anchor2),a=!1,c=0,l=0;switch(this.jointType){case n.Fixed:let h=s.T3.intoRaw(this.frame1),d=s.T3.intoRaw(this.frame2);e=o.cQ.fixed(r,h,i,d),h.free(),d.free();break;case n.Prismatic:t=s.ut.intoRaw(this.axis),this.limitsEnabled&&(a=!0,c=this.limits[0],l=this.limits[1]),e=o.cQ.prismatic(r,i,t,a,c,l),t.free();break;case n.Spherical:e=o.cQ.spherical(r,i);break;case n.Revolute:t=s.ut.intoRaw(this.axis),e=o.cQ.revolute(r,i,t),t.free()}return r.free(),i.free(),e}}i()}catch(t){i(t)}}))},9206:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{l:()=>c});var n=r(2184),a=r(8709),s=r(9380),o=t([n,s]);[n,s]=o.then?(await o)():o;class c{constructor(t){this.raw=t||new n.Qc,this.map=new a.F,t&&t.forEachJointHandle((e=>{this.map.set(e,s.s2.newTyped(t,null,e))}))}free(){this.raw.free(),this.raw=void 0,this.map.clear(),this.map=void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createJoint(t,e,r,i,n){const a=e.intoRaw(),o=this.raw.createJoint(a,r,i,n);a.free();let c=s.s2.newTyped(this.raw,t,o);return this.map.set(o,c),c}remove(t,e){this.raw.remove(t,e),this.unmap(t)}forEachJointHandleAttachedToRigidBody(t,e){this.raw.forEachJointAttachedToRigidBody(t,e)}unmap(t){this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},8715:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Am:()=>l.Am,C1:()=>o.C1,JW:()=>o.JW,Jj:()=>n.Jj,Kd:()=>u.K,RT:()=>s.R,UW:()=>l.UW,VH:()=>o.VH,Vt:()=>o.Vt,_h:()=>o._h,au:()=>o.au,dl:()=>o.dl,dx:()=>l.dx,eZ:()=>o.eZ,h1:()=>h.h,ib:()=>n.ib,jK:()=>d.j,jp:()=>l.jp,lX:()=>c.l,rF:()=>a.r,s2:()=>o.s2,wI:()=>l.wI,xr:()=>n.xr,yB:()=>p.y,yf:()=>l.yf});var n=r(1522),a=r(676),s=r(6),o=r(9380),c=r(9206),l=r(3346),h=r(8136),d=r(8042),u=r(8448),p=r(7332),w=t([n,a,s,o,c,l,h,u,p]);[n,a,s,o,c,l,h,u,p]=w.then?(await w)():w,i()}catch(t){i(t)}}))},6:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{R:()=>s});var n=r(2184),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t){this.raw=t||new n.zu}free(){this.raw.free(),this.raw=void 0}get dt(){return this.raw.dt}get erp(){return this.raw.erp}get allowedLinearError(){return this.raw.allowedLinearError}get predictionDistance(){return this.raw.predictionDistance}get maxVelocityIterations(){return this.raw.maxVelocityIterations}get maxVelocityFrictionIterations(){return this.raw.maxVelocityFrictionIterations}get maxStabilizationIterations(){return this.raw.maxStabilizationIterations}get minIslandSize(){return this.raw.minIslandSize}get maxCcdSubsteps(){return this.raw.maxCcdSubsteps}set dt(t){this.raw.dt=t}set erp(t){this.raw.erp=t}set allowedLinearError(t){this.raw.allowedLinearError=t}set predictionDistance(t){this.raw.predictionDistance=t}set maxVelocityIterations(t){this.raw.maxVelocityIterations=t}set maxVelocityFrictionIterations(t){this.raw.maxVelocityFrictionIterations=t}set maxStabilizationIterations(t){this.raw.maxStabilizationIterations=t}set minIslandSize(t){this.raw.minIslandSize=t}set maxCcdSubsteps(t){this.raw.maxCcdSubsteps=t}}i()}catch(t){i(t)}}))},7332:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{y:()=>s});var n=r(2184),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t){this.raw=t||new n.Is}free(){this.raw.free(),this.raw=void 0}forEachActiveRigidBodyHandle(t){this.raw.forEachActiveRigidBodyHandle(t)}}i()}catch(t){i(t)}}))},3346:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Am:()=>d,UW:()=>l,dx:()=>u,jp:()=>h,wI:()=>c,yf:()=>o});var n=r(2184),a=r(9380),s=t([a,n]);[a,n]=s.then?(await s)():s;class o{constructor(t,e){this.rawSet=t,this.handle=e}static newTyped(t,e){switch(t.jointType(e)){case a.dl.Revolute:return new d(t,e);case a.dl.Prismatic:return new h(t,e);case a.dl.Fixed:return new l(t,e);case a.dl.Spherical:return new u(t,e);default:return new o(t,e)}}isValid(){return this.rawSet.contains(this.handle)}}class c extends o{}class l extends o{}class h extends c{rawAxis(){return n.JM.X}}class d extends c{rawAxis(){return n.JM.AngX}}class u extends o{}i()}catch(t){i(t)}}))},8136:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{h:()=>c});var n=r(2184),a=r(8709),s=r(3346),o=t([n,s]);[n,s]=o.then?(await o)():o;class c{constructor(t){this.raw=t||new n.fl,this.map=new a.F,t&&t.forEachJointHandle((t=>{this.map.set(t,s.yf.newTyped(this.raw,t))}))}free(){this.raw.free(),this.raw=void 0,this.map.clear(),this.map=void 0}createJoint(t,e,r,i){const n=t.intoRaw(),a=this.raw.createJoint(n,e,r,i);n.free();let o=s.yf.newTyped(this.raw,a);return this.map.set(a,o),o}remove(t,e){this.raw.remove(t,e),this.map.delete(t)}unmap(t){this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}forEachJointHandleAttachedToRigidBody(t,e){this.raw.forEachJointAttachedToRigidBody(t,e)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},1522:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Jj:()=>n,ib:()=>o,xr:()=>c});var n,a=r(7383),s=t([a]);a=(s.then?(await s)():s)[0],function(t){t[t.Dynamic=0]="Dynamic",t[t.Fixed=1]="Fixed",t[t.KinematicPositionBased=2]="KinematicPositionBased",t[t.KinematicVelocityBased=3]="KinematicVelocityBased"}(n||(n={}));class o{constructor(t,e,r){this.rawSet=t,this.colliderSet=e,this.handle=r}finalizeDeserialization(t){this.colliderSet=t}isValid(){return this.rawSet.contains(this.handle)}lockTranslations(t,e){return this.rawSet.rbLockTranslations(this.handle,t,e)}lockRotations(t,e){return this.rawSet.rbLockRotations(this.handle,t,e)}restrictTranslations(t,e,r,i){return this.rawSet.rbRestrictTranslations(this.handle,t,e,r,i)}restrictRotations(t,e,r,i){return this.rawSet.rbRestrictRotations(this.handle,t,e,r,i)}dominanceGroup(){return this.rawSet.rbDominanceGroup(this.handle)}setDominanceGroup(t){this.rawSet.rbSetDominanceGroup(this.handle,t)}enableCcd(t){this.rawSet.rbEnableCcd(this.handle,t)}translation(){let t=this.rawSet.rbTranslation(this.handle);return a.ut.fromRaw(t)}rotation(){let t=this.rawSet.rbRotation(this.handle);return a.T3.fromRaw(t)}nextTranslation(){let t=this.rawSet.rbNextTranslation(this.handle);return a.ut.fromRaw(t)}nextRotation(){let t=this.rawSet.rbNextRotation(this.handle);return a.T3.fromRaw(t)}setTranslation(t,e){this.rawSet.rbSetTranslation(this.handle,t.x,t.y,t.z,e)}setLinvel(t,e){let r=a.ut.intoRaw(t);this.rawSet.rbSetLinvel(this.handle,r,e),r.free()}gravityScale(){return this.rawSet.rbGravityScale(this.handle)}setGravityScale(t,e){this.rawSet.rbSetGravityScale(this.handle,t,e)}setRotation(t,e){this.rawSet.rbSetRotation(this.handle,t.x,t.y,t.z,t.w,e)}setAngvel(t,e){let r=a.ut.intoRaw(t);this.rawSet.rbSetAngvel(this.handle,r,e),r.free()}setNextKinematicTranslation(t){this.rawSet.rbSetNextKinematicTranslation(this.handle,t.x,t.y,t.z)}setNextKinematicRotation(t){this.rawSet.rbSetNextKinematicRotation(this.handle,t.x,t.y,t.z,t.w)}linvel(){return a.ut.fromRaw(this.rawSet.rbLinvel(this.handle))}angvel(){return a.ut.fromRaw(this.rawSet.rbAngvel(this.handle))}mass(){return this.rawSet.rbMass(this.handle)}sleep(){this.rawSet.rbSleep(this.handle)}wakeUp(){this.rawSet.rbWakeUp(this.handle)}isCcdEnabled(){this.rawSet.rbIsCcdEnabled(this.handle)}numColliders(){return this.rawSet.rbNumColliders(this.handle)}collider(t){return this.colliderSet.get(this.rawSet.rbCollider(this.handle,t))}bodyType(){return this.rawSet.rbBodyType(this.handle)}setBodyType(t){return this.rawSet.rbSetBodyType(this.handle,t)}isSleeping(){return this.rawSet.rbIsSleeping(this.handle)}isMoving(){return this.rawSet.rbIsMoving(this.handle)}isFixed(){return this.rawSet.rbIsFixed(this.handle)}isKinematic(){return this.rawSet.rbIsKinematic(this.handle)}isDynamic(){return this.rawSet.rbIsDynamic(this.handle)}linearDamping(){return this.rawSet.rbLinearDamping(this.handle)}angularDamping(){return this.rawSet.rbAngularDamping(this.handle)}setLinearDamping(t){this.rawSet.rbSetLinearDamping(this.handle,t)}setAngularDamping(t){this.rawSet.rbSetAngularDamping(this.handle,t)}resetForces(t){this.rawSet.rbResetForces(this.handle,t)}resetTorques(t){this.rawSet.rbResetTorques(this.handle,t)}addForce(t,e){const r=a.ut.intoRaw(t);this.rawSet.rbAddForce(this.handle,r,e),r.free()}applyImpulse(t,e){const r=a.ut.intoRaw(t);this.rawSet.rbApplyImpulse(this.handle,r,e),r.free()}addTorque(t,e){const r=a.ut.intoRaw(t);this.rawSet.rbAddTorque(this.handle,r,e),r.free()}applyTorqueImpulse(t,e){const r=a.ut.intoRaw(t);this.rawSet.rbApplyTorqueImpulse(this.handle,r,e),r.free()}addForceAtPoint(t,e,r){const i=a.ut.intoRaw(t),n=a.ut.intoRaw(e);this.rawSet.rbAddForceAtPoint(this.handle,i,n,r),i.free(),n.free()}applyImpulseAtPoint(t,e,r){const i=a.ut.intoRaw(t),n=a.ut.intoRaw(e);this.rawSet.rbApplyImpulseAtPoint(this.handle,i,n,r),i.free(),n.free()}}class c{constructor(t){this.status=t,this.translation=a.ut.zeros(),this.rotation=a.T3.identity(),this.gravityScale=1,this.linvel=a.ut.zeros(),this.mass=0,this.centerOfMass=a.ut.zeros(),this.translationsEnabledX=!0,this.translationsEnabledY=!0,this.angvel=a.ut.zeros(),this.principalAngularInertia=a.ut.zeros(),this.angularInertiaLocalFrame=a.T3.identity(),this.translationsEnabledZ=!0,this.rotationsEnabledX=!0,this.rotationsEnabledY=!0,this.rotationsEnabledZ=!0,this.linearDamping=0,this.angularDamping=0,this.canSleep=!0,this.sleeping=!1,this.ccdEnabled=!1,this.dominanceGroup=0}static dynamic(){return new c(n.Dynamic)}static kinematicPositionBased(){return new c(n.KinematicPositionBased)}static kinematicVelocityBased(){return new c(n.KinematicVelocityBased)}static fixed(){return new c(n.Fixed)}static newDynamic(){return new c(n.Dynamic)}static newKinematicPositionBased(){return new c(n.KinematicPositionBased)}static newKinematicVelocityBased(){return new c(n.KinematicVelocityBased)}static newStatic(){return new c(n.Fixed)}setDominanceGroup(t){return this.dominanceGroup=t,this}setTranslation(t,e,r){if("number"!=typeof t||"number"!=typeof e||"number"!=typeof r)throw TypeError("The translation components must be numbers.");return this.translation={x:t,y:e,z:r},this}setRotation(t){return this.rotation=t,this}setGravityScale(t){return this.gravityScale=t,this}setAdditionalMass(t){return this.mass=t,this}setLinvel(t,e,r){if("number"!=typeof t||"number"!=typeof e||"number"!=typeof r)throw TypeError("The linvel components must be numbers.");return this.linvel={x:t,y:e,z:r},this}setAngvel(t){return this.angvel=t,this}setAdditionalMassProperties(t,e,r,i){return this.mass=t,this.centerOfMass=e,this.principalAngularInertia=r,this.angularInertiaLocalFrame=i,this}setAdditionalPrincipalAngularInertia(t){return this.principalAngularInertia=t,this}restrictTranslations(t,e,r){return this.translationsEnabledX=t,this.translationsEnabledY=e,this.translationsEnabledZ=r,this}lockTranslations(){return this.restrictTranslations(!1,!1,!1)}restrictRotations(t,e,r){return this.rotationsEnabledX=t,this.rotationsEnabledY=e,this.rotationsEnabledZ=r,this}lockRotations(){return this.restrictRotations(!1,!1,!1)}setLinearDamping(t){return this.linearDamping=t,this}setAngularDamping(t){return this.angularDamping=t,this}setCanSleep(t){return this.canSleep=t,this}setSleeping(t){return this.sleeping=t,this}setCcdEnabled(t){return this.ccdEnabled=t,this}setUserData(t){return this.userData=t,this}}i()}catch(t){i(t)}}))},676:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{r:()=>l});var n=r(2184),a=r(8709),s=r(7383),o=r(1522),c=t([n,o,s]);[n,o,s]=c.then?(await c)():c;class l{constructor(t){this.raw=t||new n.fY,this.map=new a.F,t&&t.forEachRigidBodyHandle((e=>{this.map.set(e,new o.ib(t,null,e))}))}free(){this.raw.free(),this.raw=void 0,this.map.clear(),this.map=void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createRigidBody(t,e){let r=s.ut.intoRaw(e.translation),i=s.T3.intoRaw(e.rotation),n=s.ut.intoRaw(e.linvel),a=s.ut.intoRaw(e.centerOfMass),c=s.ut.intoRaw(e.angvel),l=s.ut.intoRaw(e.principalAngularInertia),h=s.T3.intoRaw(e.angularInertiaLocalFrame),d=this.raw.createRigidBody(r,i,e.gravityScale,e.mass,a,n,c,l,h,e.translationsEnabledX,e.translationsEnabledY,e.translationsEnabledZ,e.rotationsEnabledX,e.rotationsEnabledY,e.rotationsEnabledZ,e.linearDamping,e.angularDamping,e.status,e.canSleep,e.sleeping,e.ccdEnabled,e.dominanceGroup);r.free(),i.free(),n.free(),a.free(),c.free(),l.free(),h.free();const u=new o.ib(this.raw,t,d);return u.userData=e.userData,this.map.set(d,u),u}remove(t,e,r,i,n){for(let e=0;e<this.raw.rbNumColliders(t);e+=1)r.unmap(this.raw.rbCollider(t,e));i.forEachJointHandleAttachedToRigidBody(t,(t=>i.unmap(t))),n.forEachJointHandleAttachedToRigidBody(t,(t=>n.unmap(t))),this.raw.remove(t,e.raw,r.raw,i.raw,n.raw),this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}forEachActiveRigidBody(t,e){t.forEachActiveRigidBodyHandle((t=>{e(this.get(t))}))}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},2324:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.r(e),r.d(e,{ActiveCollisionTypes:()=>o.vq,ActiveEvents:()=>c.Md,ActiveHooks:()=>c.iX,Ball:()=>o.ec,BroadPhase:()=>o.NT,CCDSolver:()=>s.Kd,Capsule:()=>o.sw,CoefficientCombineRule:()=>s.jK,Collider:()=>o.YM,ColliderDesc:()=>o.ic,ColliderSet:()=>o.zY,Cone:()=>o.Qq,ConvexPolyhedron:()=>o.YD,Cuboid:()=>o.jv,Cylinder:()=>o.Ab,DebugRenderBuffers:()=>c.tt,DebugRenderPipeline:()=>c.kh,EventQueue:()=>c.NH,FeatureType:()=>o.Te,FixedImpulseJoint:()=>s.JW,FixedMultibodyJoint:()=>s.UW,Heightfield:()=>o.f4,ImpulseJoint:()=>s.s2,ImpulseJointSet:()=>s.lX,IntegrationParameters:()=>s.RT,IslandManager:()=>s.yB,JointData:()=>s._h,JointType:()=>s.dl,MotorModel:()=>s.Vt,MultibodyJoint:()=>s.yf,MultibodyJointSet:()=>s.h1,NarrowPhase:()=>o.L4,PhysicsPipeline:()=>c.DJ,PointColliderProjection:()=>o.Vl,PointProjection:()=>o.FP,Polyline:()=>o.aH,PrismaticImpulseJoint:()=>s.eZ,PrismaticMultibodyJoint:()=>s.jp,Quaternion:()=>a._f,Ray:()=>o.zH,RayColliderIntersection:()=>o.No,RayColliderToi:()=>o.cu,RayIntersection:()=>o.Gz,RevoluteImpulseJoint:()=>s.au,RevoluteMultibodyJoint:()=>s.Am,RigidBody:()=>s.ib,RigidBodyDesc:()=>s.xr,RigidBodySet:()=>s.rF,RigidBodyType:()=>s.Jj,RotationOps:()=>a.T3,RoundCone:()=>o.eT,RoundConvexPolyhedron:()=>o.Ch,RoundCuboid:()=>o.iA,RoundCylinder:()=>o.$t,RoundTriangle:()=>o.$R,Segment:()=>o.XX,SerializationPipeline:()=>c.y9,Shape:()=>o.bn,ShapeColliderTOI:()=>o.mB,ShapeContact:()=>o.Qi,ShapeTOI:()=>o.GJ,ShapeType:()=>o.DY,SolverFlags:()=>c.Nv,SphericalImpulseJoint:()=>s.VH,SphericalMultibodyJoint:()=>s.dx,TempContactManifold:()=>o.eL,TriMesh:()=>o.az,Triangle:()=>o.CJ,UnitImpulseJoint:()=>s.C1,UnitMultibodyJoint:()=>s.wI,Vector3:()=>a.P,VectorOps:()=>a.ut,World:()=>c.q3,version:()=>h});var n=r(2184),a=r(7383),s=r(8715),o=r(5328),c=r(161),l=t([n,a,s,o,c]);function h(){return(0,n.i8)()}[n,a,s,o,c]=l.then?(await l)():l,i()}catch(d){i(d)}}))},2261:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{N:()=>s});var n=r(2184),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t){this.raw=t||new n.FU}free(){this.raw.free(),this.raw=void 0}}i()}catch(t){i(t)}}))},377:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{YM:()=>p,ic:()=>w,vq:()=>n});var n,a=r(7383),s=r(8042),o=r(7429),c=r(3238),l=r(8461),h=r(5961),d=r(6254),u=t([o,a,l,h,d,c]);[o,a,l,h,d,c]=u.then?(await u)():u,function(t){t[t.DYNAMIC_DYNAMIC=1]="DYNAMIC_DYNAMIC",t[t.DYNAMIC_KINEMATIC=12]="DYNAMIC_KINEMATIC",t[t.DYNAMIC_FIXED=2]="DYNAMIC_FIXED",t[t.KINEMATIC_KINEMATIC=52224]="KINEMATIC_KINEMATIC",t[t.KINEMATIC_FIXED=8704]="KINEMATIC_FIXED",t[t.FIXED_FIXED=32]="FIXED_FIXED",t[t.DEFAULT=15]="DEFAULT",t[t.ALL=60943]="ALL"}(n||(n={}));class p{constructor(t,e,r,i){this.colliderSet=t,this.handle=e,this._parent=r,this._shape=i}finalizeDeserialization(t){null!=this.handle&&(this._parent=t.get(this.colliderSet.raw.coParent(this.handle)))}ensureShapeIsCached(){this._shape||(this._shape=o.bn.fromRaw(this.colliderSet.raw,this.handle))}get shape(){return this.ensureShapeIsCached(),this._shape}isValid(){return this.colliderSet.raw.contains(this.handle)}translation(){return a.ut.fromRaw(this.colliderSet.raw.coTranslation(this.handle))}rotation(){return a.T3.fromRaw(this.colliderSet.raw.coRotation(this.handle))}isSensor(){return this.colliderSet.raw.coIsSensor(this.handle)}setSensor(t){this.colliderSet.raw.coSetSensor(this.handle,t)}setShape(t){let e=t.intoRaw();this.colliderSet.raw.coSetShape(this.handle,e),e.free(),this._shape=t}setRestitution(t){this.colliderSet.raw.coSetRestitution(this.handle,t)}setFriction(t){this.colliderSet.raw.coSetFriction(this.handle,t)}frictionCombineRule(){return this.colliderSet.raw.coFrictionCombineRule(this.handle)}setFrictionCombineRule(t){this.colliderSet.raw.coSetFrictionCombineRule(this.handle,t)}restitutionCombineRule(){return this.colliderSet.raw.coRestitutionCombineRule(this.handle)}setRestitutionCombineRule(t){this.colliderSet.raw.coSetRestitutionCombineRule(this.handle,t)}setCollisionGroups(t){this.colliderSet.raw.coSetCollisionGroups(this.handle,t)}setSolverGroups(t){this.colliderSet.raw.coSetSolverGroups(this.handle,t)}activeHooks(){return this.colliderSet.raw.coActiveHooks(this.handle)}setActiveHooks(t){this.colliderSet.raw.coSetActiveHooks(this.handle,t)}activeEvents(){return this.colliderSet.raw.coActiveEvents(this.handle)}setActiveEvents(t){this.colliderSet.raw.coSetActiveEvents(this.handle,t)}activeCollisionTypes(){return this.colliderSet.raw.coActiveCollisionTypes(this.handle)}setActiveCollisionTypes(t){this.colliderSet.raw.coSetActiveCollisionTypes(this.handle,t)}setTranslation(t){this.colliderSet.raw.coSetTranslation(this.handle,t.x,t.y,t.z)}setTranslationWrtParent(t){this.colliderSet.raw.coSetTranslationWrtParent(this.handle,t.x,t.y,t.z)}setRotation(t){this.colliderSet.raw.coSetRotation(this.handle,t.x,t.y,t.z,t.w)}setRotationWrtParent(t){this.colliderSet.raw.coSetRotationWrtParent(this.handle,t.x,t.y,t.z,t.w)}shapeType(){return this.colliderSet.raw.coShapeType(this.handle)}halfExtents(){return a.ut.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle))}radius(){return this.colliderSet.raw.coRadius(this.handle)}roundRadius(){return this.colliderSet.raw.coRoundRadius(this.handle)}halfHeight(){return this.colliderSet.raw.coHalfHeight(this.handle)}vertices(){return this.colliderSet.raw.coVertices(this.handle)}indices(){return this.colliderSet.raw.coIndices(this.handle)}heightfieldHeights(){return this.colliderSet.raw.coHeightfieldHeights(this.handle)}heightfieldScale(){let t=this.colliderSet.raw.coHeightfieldScale(this.handle);return a.ut.fromRaw(t)}heightfieldNRows(){return this.colliderSet.raw.coHeightfieldNRows(this.handle)}heightfieldNCols(){return this.colliderSet.raw.coHeightfieldNCols(this.handle)}parent(){return this._parent}friction(){return this.colliderSet.raw.coFriction(this.handle)}restitution(){return this.colliderSet.raw.coRestitution(this.handle)}density(){return this.colliderSet.raw.coDensity(this.handle)}collisionGroups(){return this.colliderSet.raw.coCollisionGroups(this.handle)}solverGroups(){return this.colliderSet.raw.coSolverGroups(this.handle)}containsPoint(t){let e=a.ut.intoRaw(t),r=this.colliderSet.raw.coContainsPoint(this.handle,e);return e.free(),r}projectPoint(t,e){let r=a.ut.intoRaw(t),i=l.F.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle,r,e));return r.free(),i}intersectsRay(t,e){let r=a.ut.intoRaw(t.origin),i=a.ut.intoRaw(t.dir),n=this.colliderSet.raw.coIntersectsRay(this.handle,r,i,e);return r.free(),i.free(),n}castShape(t,e,r,i,n,s){let o=a.ut.intoRaw(t),c=a.ut.intoRaw(r),l=a.T3.intoRaw(i),d=a.ut.intoRaw(n),u=e.intoRaw(),p=h.G.fromRaw(this.colliderSet,this.colliderSet.raw.coCastShape(this.handle,o,u,c,l,d,s));return o.free(),c.free(),l.free(),d.free(),u.free(),p}castCollider(t,e,r,i){let n=a.ut.intoRaw(t),s=a.ut.intoRaw(r),o=h.m.fromRaw(this.colliderSet,this.colliderSet.raw.coCastCollider(this.handle,n,e.handle,s,i));return n.free(),s.free(),o}intersectsShape(t,e,r){let i=a.ut.intoRaw(e),n=a.T3.intoRaw(r),s=t.intoRaw(),o=this.colliderSet.raw.coIntersectsShape(this.handle,s,i,n);return i.free(),n.free(),s.free(),o}contactShape(t,e,r,i){let n=a.ut.intoRaw(e),s=a.T3.intoRaw(r),o=t.intoRaw(),c=d.Q.fromRaw(this.colliderSet.raw.coContactShape(this.handle,o,n,s,i));return n.free(),s.free(),o.free(),c}contactCollider(t,e){return d.Q.fromRaw(this.colliderSet.raw.coContactCollider(this.handle,t.handle,e))}castRay(t,e,r){let i=a.ut.intoRaw(t.origin),n=a.ut.intoRaw(t.dir),s=this.colliderSet.raw.coCastRay(this.handle,i,n,e,r);return i.free(),n.free(),s}castRayAndGetNormal(t,e,r){let i=a.ut.intoRaw(t.origin),n=a.ut.intoRaw(t.dir),s=c.Gz.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle,i,n,e,r));return i.free(),n.free(),s}}class w{constructor(t){this.shape=t,this.useMassProps=!1,this.density=1,this.friction=.5,this.restitution=0,this.rotation=a.T3.identity(),this.translation=a.ut.zeros(),this.isSensor=!1,this.collisionGroups=4294967295,this.solverGroups=4294967295,this.frictionCombineRule=s.j.Average,this.restitutionCombineRule=s.j.Average,this.activeCollisionTypes=n.DEFAULT,this.activeEvents=0,this.activeHooks=0,this.mass=0,this.centerOfMass=a.ut.zeros(),this.principalAngularInertia=a.ut.zeros(),this.angularInertiaLocalFrame=a.T3.identity()}static ball(t){const e=new o.ec(t);return new w(e)}static capsule(t,e){const r=new o.sw(t,e);return new w(r)}static segment(t,e){const r=new o.XX(t,e);return new w(r)}static triangle(t,e,r){const i=new o.CJ(t,e,r);return new w(i)}static roundTriangle(t,e,r,i){const n=new o.$R(t,e,r,i);return new w(n)}static polyline(t,e){const r=new o.aH(t,e);return new w(r)}static trimesh(t,e){const r=new o.az(t,e);return new w(r)}static cuboid(t,e,r){const i=new o.jv(t,e,r);return new w(i)}static roundCuboid(t,e,r,i){const n=new o.iA(t,e,r,i);return new w(n)}static heightfield(t,e,r,i){const n=new o.f4(t,e,r,i);return new w(n)}static cylinder(t,e){const r=new o.Ab(t,e);return new w(r)}static roundCylinder(t,e,r){const i=new o.$t(t,e,r);return new w(i)}static cone(t,e){const r=new o.Qq(t,e);return new w(r)}static roundCone(t,e,r){const i=new o.eT(t,e,r);return new w(i)}static convexHull(t){const e=new o.YD(t,null);return new w(e)}static convexMesh(t,e){const r=new o.YD(t,e);return new w(r)}static roundConvexHull(t,e){const r=new o.Ch(t,null,e);return new w(r)}static roundConvexMesh(t,e,r){const i=new o.Ch(t,e,r);return new w(i)}setTranslation(t,e,r){if("number"!=typeof t||"number"!=typeof e||"number"!=typeof r)throw TypeError("The translation components must be numbers.");return this.translation={x:t,y:e,z:r},this}setRotation(t){return this.rotation=t,this}setSensor(t){return this.isSensor=t,this}setDensity(t){return this.useMassProps=!1,this.density=t,this}setMassProperties(t,e,r,i){return this.useMassProps=!0,this.mass=t,this.centerOfMass=e,this.principalAngularInertia=r,this.angularInertiaLocalFrame=i,this}setRestitution(t){return this.restitution=t,this}setFriction(t){return this.friction=t,this}setFrictionCombineRule(t){return this.frictionCombineRule=t,this}setRestitutionCombineRule(t){return this.restitutionCombineRule=t,this}setCollisionGroups(t){return this.collisionGroups=t,this}setSolverGroups(t){return this.solverGroups=t,this}setActiveHooks(t){return this.activeHooks=t,this}setActiveEvents(t){return this.activeEvents=t,this}setActiveCollisionTypes(t){return this.activeCollisionTypes=t,this}}i()}catch(t){i(t)}}))},1927:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{z:()=>l});var n=r(2184),a=r(8709),s=r(7383),o=r(377),c=t([n,o,s]);[n,o,s]=c.then?(await c)():c;class l{constructor(t){this.raw=t||new n.IQ,this.map=new a.F,t&&t.forEachColliderHandle((t=>{this.map.set(t,new o.YM(this,t,null))}))}free(){this.raw.free(),this.raw=void 0,this.map.clear(),this.map=void 0}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createCollider(t,e,r){let i=null!=r&&null!=r;if(i&&isNaN(r))throw Error("Cannot create a collider with a parent rigid-body handle that is not a number.");let n=e.shape.intoRaw(),a=s.ut.intoRaw(e.translation),c=s.T3.intoRaw(e.rotation),l=s.ut.intoRaw(e.centerOfMass),h=s.ut.intoRaw(e.principalAngularInertia),d=s.T3.intoRaw(e.angularInertiaLocalFrame),u=this.raw.createCollider(n,a,c,e.useMassProps,e.mass,l,h,d,e.density,e.friction,e.restitution,e.frictionCombineRule,e.restitutionCombineRule,e.isSensor,e.collisionGroups,e.solverGroups,e.activeCollisionTypes,e.activeHooks,e.activeEvents,i,i?r:0,t.raw);n.free(),a.free(),c.free(),l.free(),h.free(),d.free();let p=i?t.get(r):null,w=new o.YM(this,u,p,e.shape);return this.map.set(u,w),w}remove(t,e,r,i){this.raw.remove(t,e.raw,r.raw,i),this.unmap(t)}unmap(t){this.map.delete(t)}get(t){return this.map.get(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}forEach(t){this.map.forEach(t)}getAll(){return this.map.getAll()}}i()}catch(t){i(t)}}))},6254:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Q:()=>s});var n=r(7383),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e,r,i,n){this.distance=t,this.point1=e,this.point2=r,this.normal1=i,this.normal2=n}static fromRaw(t){if(!t)return null;const e=new s(t.distance(),n.ut.fromRaw(t.point1()),n.ut.fromRaw(t.point2()),n.ut.fromRaw(t.normal1()),n.ut.fromRaw(t.normal2()));return t.free(),e}}i()}catch(t){i(t)}}))},4193:(t,e,r)=>{var i;r.d(e,{T:()=>i}),function(t){t[t.Vertex=0]="Vertex",t[t.Edge=1]="Edge",t[t.Face=2]="Face",t[t.Unknown=3]="Unknown"}(i||(i={}))},5328:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{$R:()=>s.$R,$t:()=>s.$t,Ab:()=>s.Ab,CJ:()=>s.CJ,Ch:()=>s.Ch,DY:()=>s.DY,FP:()=>d.F,GJ:()=>u.G,Gz:()=>h.Gz,L4:()=>a.L,NT:()=>n.N,No:()=>h.No,Qi:()=>p.Q,Qq:()=>s.Qq,Te:()=>l.T,Vl:()=>d.V,XX:()=>s.XX,YD:()=>s.YD,YM:()=>o.YM,aH:()=>s.aH,az:()=>s.az,bn:()=>s.bn,cu:()=>h.cu,eL:()=>a.e,eT:()=>s.eT,ec:()=>s.ec,f4:()=>s.f4,iA:()=>s.iA,ic:()=>o.ic,jv:()=>s.jv,mB:()=>u.m,sw:()=>s.sw,vq:()=>o.vq,zH:()=>h.zH,zY:()=>c.z});var n=r(2261),a=r(1322),s=r(7429),o=r(377),c=r(1927),l=r(4193),h=r(3238),d=r(8461),u=r(5961),p=r(6254),w=t([n,a,s,o,c,h,d,u,p]);[n,a,s,o,c,h,d,u,p]=w.then?(await w)():w,i()}catch(t){i(t)}}))},1322:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{L:()=>o,e:()=>c});var n=r(2184),a=r(7383),s=t([n,a]);[n,a]=s.then?(await s)():s;class o{constructor(t){this.raw=t||new n.uU,this.tempManifold=new c(null)}free(){this.raw.free(),this.raw=void 0}contactsWith(t,e){this.raw.contacts_with(t,e)}intersectionsWith(t,e){this.raw.intersections_with(t,e)}contactPair(t,e,r){const i=this.raw.contact_pair(t,e);if(i){const e=i.collider1()!=t;let n;for(n=0;n<i.numContactManifolds();++n)this.tempManifold.raw=i.contactManifold(n),this.tempManifold.raw&&r(this.tempManifold,e),this.tempManifold.free();i.free()}}intersectionPair(t,e){return this.raw.intersection_pair(t,e)}}class c{constructor(t){this.raw=t}free(){this.raw.free(),this.raw=void 0}normal(){return a.ut.fromRaw(this.raw.normal())}localNormal1(){return a.ut.fromRaw(this.raw.local_n1())}localNormal2(){return a.ut.fromRaw(this.raw.local_n2())}subshape1(){return this.raw.subshape1()}subshape2(){return this.raw.subshape2()}numContacts(){return this.raw.num_contacts()}localContactPoint1(t){return a.ut.fromRaw(this.raw.contact_local_p1(t))}localContactPoint2(t){return a.ut.fromRaw(this.raw.contact_local_p2(t))}contactDist(t){return this.raw.contact_dist(t)}contactFid1(t){return this.raw.contact_fid1(t)}contactFid2(t){return this.raw.contact_fid2(t)}contactImpulse(t){return this.raw.contact_impulse(t)}contactTangentImpulseX(t){return this.raw.contact_tangent_impulse_x(t)}contactTangentImpulseY(t){return this.raw.contact_tangent_impulse_y(t)}numSolverContacts(){return this.raw.num_solver_contacts()}solverContactPoint(t){return a.ut.fromRaw(this.raw.solver_contact_point(t))}solverContactDist(t){return this.raw.solver_contact_dist(t)}solverContactFriction(t){return this.raw.solver_contact_friction(t)}solverContactRestitution(t){return this.raw.solver_contact_restitution(t)}solverContactTangentVelocity(t){return a.ut.fromRaw(this.raw.solver_contact_tangent_velocity(t))}}i()}catch(t){i(t)}}))},8461:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{F:()=>o,V:()=>c});var n=r(7383),a=r(4193),s=t([n]);n=(s.then?(await s)():s)[0];class o{constructor(t,e){this.point=t,this.isInside=e}static fromRaw(t){if(!t)return null;const e=new o(n.ut.fromRaw(t.point()),t.isInside());return t.free(),e}}class c{constructor(t,e,r,i,n){this.featureType=a.T.Unknown,this.featureId=void 0,this.collider=t,this.point=e,this.isInside=r,void 0!==n&&(this.featureId=n),void 0!==i&&(this.featureType=i)}static fromRaw(t,e){if(!e)return null;const r=new c(t.get(e.colliderHandle()),n.ut.fromRaw(e.point()),e.isInside(),e.featureType(),e.featureId());return e.free(),r}}i()}catch(t){i(t)}}))},3238:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{Gz:()=>c,No:()=>l,cu:()=>h,zH:()=>o});var n=r(7383),a=r(4193),s=t([n]);n=(s.then?(await s)():s)[0];class o{constructor(t,e){this.origin=t,this.dir=e}pointAt(t){return{x:this.origin.x+this.dir.x*t,y:this.origin.y+this.dir.y*t,z:this.origin.z+this.dir.z*t}}}class c{constructor(t,e,r,i){this.featureType=a.T.Unknown,this.featureId=void 0,this.toi=t,this.normal=e,void 0!==i&&(this.featureId=i),void 0!==r&&(this.featureType=r)}static fromRaw(t){if(!t)return null;const e=new c(t.toi(),n.ut.fromRaw(t.normal()),t.featureType(),t.featureId());return t.free(),e}}class l{constructor(t,e,r,i,n){this.featureType=a.T.Unknown,this.featureId=void 0,this.collider=t,this.toi=e,this.normal=r,void 0!==n&&(this.featureId=n),void 0!==i&&(this.featureType=i)}static fromRaw(t,e){if(!e)return null;const r=new l(t.get(e.colliderHandle()),e.toi(),n.ut.fromRaw(e.normal()),e.featureType(),e.featureId());return e.free(),r}}class h{constructor(t,e){this.collider=t,this.toi=e}static fromRaw(t,e){if(!e)return null;const r=new h(t.get(e.colliderHandle()),e.toi());return e.free(),r}}i()}catch(t){i(t)}}))},7429:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{$R:()=>b,$t:()=>I,Ab:()=>T,CJ:()=>m,Ch:()=>S,DY:()=>n,Qq:()=>x,XX:()=>f,YD:()=>v,aH:()=>g,az:()=>R,bn:()=>u,eT:()=>A,ec:()=>p,f4:()=>C,iA:()=>_,jv:()=>w,sw:()=>y});var n,a=r(7383),s=r(2184),o=r(6254),c=r(8461),l=r(3238),h=r(5961),d=t([a,h,o,c,l,s]);[a,h,o,c,l,s]=d.then?(await d)():d;class u{static fromRaw(t,e){const r=t.coShapeType(e);let i,s,o,c,l,h;switch(r){case n.Ball:return new p(t.coRadius(e));case n.Cuboid:return i=t.coHalfExtents(e),new w(i.x,i.y,i.z);case n.RoundCuboid:return i=t.coHalfExtents(e),s=t.coRoundRadius(e),new _(i.x,i.y,i.z,s);case n.Capsule:return l=t.coHalfHeight(e),h=t.coRadius(e),new y(l,h);case n.Segment:return o=t.coVertices(e),new f(a.ut.new(o[0],o[1],o[2]),a.ut.new(o[3],o[4],o[5]));case n.Polyline:return o=t.coVertices(e),c=t.coIndices(e),new g(o,c);case n.Triangle:return o=t.coVertices(e),new m(a.ut.new(o[0],o[1],o[2]),a.ut.new(o[3],o[4],o[5]),a.ut.new(o[6],o[7],o[8]));case n.RoundTriangle:return o=t.coVertices(e),s=t.coRoundRadius(e),new b(a.ut.new(o[0],o[1],o[2]),a.ut.new(o[3],o[4],o[5]),a.ut.new(o[6],o[7],o[8]),s);case n.TriMesh:return o=t.coVertices(e),c=t.coIndices(e),new R(o,c);case n.HeightField:const d=t.coHeightfieldScale(e),u=t.coHeightfieldHeights(e),P=t.coHeightfieldNRows(e),j=t.coHeightfieldNCols(e);return new C(P,j,u,d);case n.ConvexPolyhedron:return o=t.coVertices(e),c=t.coIndices(e),new v(o,c);case n.RoundConvexPolyhedron:return o=t.coVertices(e),c=t.coIndices(e),s=t.coRoundRadius(e),new S(o,c,s);case n.Cylinder:return l=t.coHalfHeight(e),h=t.coRadius(e),new T(l,h);case n.RoundCylinder:return l=t.coHalfHeight(e),h=t.coRadius(e),s=t.coRoundRadius(e),new I(l,h,s);case n.Cone:return l=t.coHalfHeight(e),h=t.coRadius(e),new x(l,h);case n.RoundCone:return l=t.coHalfHeight(e),h=t.coRadius(e),s=t.coRoundRadius(e),new A(l,h,s);default:throw new Error("unknown shape type: "+r)}}castShape(t,e,r,i,n,s,o,c){let l=a.ut.intoRaw(t),d=a.T3.intoRaw(e),u=a.ut.intoRaw(r),p=a.ut.intoRaw(n),w=a.T3.intoRaw(s),_=a.ut.intoRaw(o),y=this.intoRaw(),f=i.intoRaw(),m=h.G.fromRaw(null,y.castShape(l,d,u,f,p,w,_,c));return l.free(),d.free(),u.free(),p.free(),w.free(),_.free(),y.free(),f.free(),m}intersectsShape(t,e,r,i,n){let s=a.ut.intoRaw(t),o=a.T3.intoRaw(e),c=a.ut.intoRaw(i),l=a.T3.intoRaw(n),h=this.intoRaw(),d=r.intoRaw(),u=h.intersectsShape(s,o,d,c,l);return s.free(),o.free(),c.free(),l.free(),h.free(),d.free(),u}contactShape(t,e,r,i,n,s){let c=a.ut.intoRaw(t),l=a.T3.intoRaw(e),h=a.ut.intoRaw(i),d=a.T3.intoRaw(n),u=this.intoRaw(),p=r.intoRaw(),w=o.Q.fromRaw(u.contactShape(c,l,p,h,d,s));return c.free(),l.free(),h.free(),d.free(),u.free(),p.free(),w}containsPoint(t,e,r){let i=a.ut.intoRaw(t),n=a.T3.intoRaw(e),s=a.ut.intoRaw(r),o=this.intoRaw(),c=o.containsPoint(i,n,s);return i.free(),n.free(),s.free(),o.free(),c}projectPoint(t,e,r,i){let n=a.ut.intoRaw(t),s=a.T3.intoRaw(e),o=a.ut.intoRaw(r),l=this.intoRaw(),h=c.F.fromRaw(l.projectPoint(n,s,o,i));return n.free(),s.free(),o.free(),l.free(),h}intersectsRay(t,e,r,i){let n=a.ut.intoRaw(e),s=a.T3.intoRaw(r),o=a.ut.intoRaw(t.origin),c=a.ut.intoRaw(t.dir),l=this.intoRaw(),h=l.intersectsRay(n,s,o,c,i);return n.free(),s.free(),o.free(),c.free(),l.free(),h}castRay(t,e,r,i,n){let s=a.ut.intoRaw(e),o=a.T3.intoRaw(r),c=a.ut.intoRaw(t.origin),l=a.ut.intoRaw(t.dir),h=this.intoRaw(),d=h.castRay(s,o,c,l,i,n);return s.free(),o.free(),c.free(),l.free(),h.free(),d}castRayAndGetNormal(t,e,r,i,n){let s=a.ut.intoRaw(e),o=a.T3.intoRaw(r),c=a.ut.intoRaw(t.origin),h=a.ut.intoRaw(t.dir),d=this.intoRaw(),u=l.Gz.fromRaw(d.castRayAndGetNormal(s,o,c,h,i,n));return s.free(),o.free(),c.free(),h.free(),d.free(),u}}!function(t){t[t.Ball=0]="Ball",t[t.Cuboid=1]="Cuboid",t[t.Capsule=2]="Capsule",t[t.Segment=3]="Segment",t[t.Polyline=4]="Polyline",t[t.Triangle=5]="Triangle",t[t.TriMesh=6]="TriMesh",t[t.HeightField=7]="HeightField",t[t.ConvexPolyhedron=9]="ConvexPolyhedron",t[t.Cylinder=10]="Cylinder",t[t.Cone=11]="Cone",t[t.RoundCuboid=12]="RoundCuboid",t[t.RoundTriangle=13]="RoundTriangle",t[t.RoundCylinder=14]="RoundCylinder",t[t.RoundCone=15]="RoundCone",t[t.RoundConvexPolyhedron=16]="RoundConvexPolyhedron"}(n||(n={}));class p extends u{constructor(t){super(),this.type=n.Ball,this.radius=t}intoRaw(){return s.X7.ball(this.radius)}}class w extends u{constructor(t,e,r){super(),this.type=n.Cuboid,this.halfExtents=a.ut.new(t,e,r)}intoRaw(){return s.X7.cuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z)}}class _ extends u{constructor(t,e,r,i){super(),this.type=n.RoundCuboid,this.halfExtents=a.ut.new(t,e,r),this.borderRadius=i}intoRaw(){return s.X7.roundCuboid(this.halfExtents.x,this.halfExtents.y,this.halfExtents.z,this.borderRadius)}}class y extends u{constructor(t,e){super(),this.type=n.Capsule,this.halfHeight=t,this.radius=e}intoRaw(){return s.X7.capsule(this.halfHeight,this.radius)}}class f extends u{constructor(t,e){super(),this.type=n.Segment,this.a=t,this.b=e}intoRaw(){let t=a.ut.intoRaw(this.a),e=a.ut.intoRaw(this.b),r=s.X7.segment(t,e);return t.free(),e.free(),r}}class m extends u{constructor(t,e,r){super(),this.type=n.Triangle,this.a=t,this.b=e,this.c=r}intoRaw(){let t=a.ut.intoRaw(this.a),e=a.ut.intoRaw(this.b),r=a.ut.intoRaw(this.c),i=s.X7.triangle(t,e,r);return t.free(),e.free(),r.free(),i}}class b extends u{constructor(t,e,r,i){super(),this.type=n.RoundTriangle,this.a=t,this.b=e,this.c=r,this.borderRadius=i}intoRaw(){let t=a.ut.intoRaw(this.a),e=a.ut.intoRaw(this.b),r=a.ut.intoRaw(this.c),i=s.X7.roundTriangle(t,e,r,this.borderRadius);return t.free(),e.free(),r.free(),i}}class g extends u{constructor(t,e){super(),this.type=n.Polyline,this.vertices=t,this.indices=null!=e?e:new Uint32Array(0)}intoRaw(){return s.X7.polyline(this.vertices,this.indices)}}class R extends u{constructor(t,e){super(),this.type=n.TriMesh,this.vertices=t,this.indices=e}intoRaw(){return s.X7.trimesh(this.vertices,this.indices)}}class v extends u{constructor(t,e){super(),this.type=n.ConvexPolyhedron,this.vertices=t,this.indices=e}intoRaw(){return this.indices?s.X7.convexMesh(this.vertices,this.indices):s.X7.convexHull(this.vertices)}}class S extends u{constructor(t,e,r){super(),this.type=n.RoundConvexPolyhedron,this.vertices=t,this.indices=e,this.borderRadius=r}intoRaw(){return this.indices?s.X7.roundConvexMesh(this.vertices,this.indices,this.borderRadius):s.X7.roundConvexHull(this.vertices,this.borderRadius)}}class C extends u{constructor(t,e,r,i){super(),this.type=n.HeightField,this.nrows=t,this.ncols=e,this.heights=r,this.scale=i}intoRaw(){let t=a.ut.intoRaw(this.scale),e=s.X7.heightfield(this.nrows,this.ncols,this.heights,t);return t.free(),e}}class T extends u{constructor(t,e){super(),this.type=n.Cylinder,this.halfHeight=t,this.radius=e}intoRaw(){return s.X7.cylinder(this.halfHeight,this.radius)}}class I extends u{constructor(t,e,r){super(),this.type=n.RoundCylinder,this.borderRadius=r,this.halfHeight=t,this.radius=e}intoRaw(){return s.X7.roundCylinder(this.halfHeight,this.radius,this.borderRadius)}}class x extends u{constructor(t,e){super(),this.type=n.Cone,this.halfHeight=t,this.radius=e}intoRaw(){return s.X7.cone(this.halfHeight,this.radius)}}class A extends u{constructor(t,e,r){super(),this.type=n.RoundCone,this.halfHeight=t,this.radius=e,this.borderRadius=r}intoRaw(){return s.X7.roundCone(this.halfHeight,this.radius,this.borderRadius)}}i()}catch(t){i(t)}}))},5961:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{G:()=>s,m:()=>o});var n=r(7383),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e,r,i,n){this.toi=t,this.witness1=e,this.witness2=r,this.normal1=i,this.normal2=n}static fromRaw(t,e){if(!e)return null;const r=new s(e.toi(),n.ut.fromRaw(e.witness1()),n.ut.fromRaw(e.witness2()),n.ut.fromRaw(e.normal1()),n.ut.fromRaw(e.normal2()));return e.free(),r}}class o extends s{constructor(t,e,r,i,n,a){super(e,r,i,n,a),this.collider=t}static fromRaw(t,e){if(!e)return null;const r=new o(t.get(e.colliderHandle()),e.toi(),n.ut.fromRaw(e.witness1()),n.ut.fromRaw(e.witness2()),n.ut.fromRaw(e.normal1()),n.ut.fromRaw(e.normal2()));return e.free(),r}}i()}catch(t){i(t)}}))},7383:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{P:()=>s,T3:()=>l,_f:()=>c,ut:()=>o});var n=r(2184),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e,r){this.x=t,this.y=e,this.z=r}}class o{static new(t,e,r){return new s(t,e,r)}static intoRaw(t){return new n.WF(t.x,t.y,t.z)}static zeros(){return o.new(0,0,0)}static fromRaw(t){if(!t)return null;let e=o.new(t.x,t.y,t.z);return t.free(),e}}class c{constructor(t,e,r,i){this.x=t,this.y=e,this.z=r,this.w=i}}class l{static identity(){return new c(0,0,0,1)}static fromRaw(t){if(!t)return null;let e=new c(t.x,t.y,t.z,t.w);return t.free(),e}static intoRaw(t){return new n.$Z(t.x,t.y,t.z,t.w)}}i()}catch(t){i(t)}}))},8339:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{k:()=>o,t:()=>s});var n=r(2184),a=t([n]);n=(a.then?(await a)():a)[0];class s{constructor(t,e){this.vertices=t,this.colors=e}}class o{constructor(t){this.raw=t||new n.wb}free(){this.raw.free(),this.raw=void 0,this.vertices=void 0,this.colors=void 0}render(t,e,r,i,n){this.raw.render(t.raw,e.raw,r.raw,i.raw,n.raw),this.vertices=this.raw.vertices(),this.colors=this.raw.colors()}}i()}catch(t){i(t)}}))},7624:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{M:()=>n,N:()=>o});var n,a=r(2184),s=t([a]);a=(s.then?(await s)():s)[0],function(t){t[t.COLLISION_EVENTS=1]="COLLISION_EVENTS"}(n||(n={}));class o{constructor(t,e){this.raw=e||new a.we(t)}free(){this.raw.free(),this.raw=void 0}drainCollisionEvents(t){this.raw.drainCollisionEvents(t)}clear(){this.raw.clear()}}i()}catch(t){i(t)}}))},161:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{DJ:()=>a.D,Md:()=>o.M,NH:()=>o.N,Nv:()=>c.N,iX:()=>c.i,kh:()=>l.k,q3:()=>n.q,tt:()=>l.t,y9:()=>s.y});var n=r(2641),a=r(7064),s=r(1301),o=r(7624),c=r(8679),l=r(8339),h=t([n,a,s,o,l]);[n,a,s,o,l]=h.then?(await h)():h,i()}catch(t){i(t)}}))},8679:(t,e,r)=>{var i,n;r.d(e,{N:()=>n,i:()=>i}),function(t){t[t.FILTER_CONTACT_PAIRS=1]="FILTER_CONTACT_PAIRS",t[t.FILTER_INTERSECTION_PAIRS=2]="FILTER_INTERSECTION_PAIRS"}(i||(i={})),function(t){t[t.EMPTY=0]="EMPTY",t[t.COMPUTE_IMPULSE=1]="COMPUTE_IMPULSE"}(n||(n={}))},7064:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{D:()=>o});var n=r(2184),a=r(7383),s=t([n,a]);[n,a]=s.then?(await s)():s;class o{constructor(t){this.raw=t||new n._q}free(){this.raw.free(),this.raw=void 0}step(t,e,r,i,n,s,o,c,l,h,d,u){let p=a.ut.intoRaw(t);d?this.raw.stepWithEvents(p,e.raw,r.raw,i.raw,n.raw,s.raw,o.raw,c.raw,l.raw,h.raw,d.raw,u,u?u.filterContactPair:null,u?u.filterIntersectionPair:null):this.raw.step(p,e.raw,r.raw,i.raw,n.raw,s.raw,o.raw,c.raw,l.raw,h.raw),p.free()}}i()}catch(t){i(t)}}))},5094:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{V:()=>h});var n=r(2184),a=r(3238),s=r(8461),o=r(5961),c=r(7383),l=t([n,c,a,s,o]);[n,c,a,s,o]=l.then?(await l)():l;class h{constructor(t){this.raw=t||new n.nv}free(){this.raw.free(),this.raw=void 0}update(t,e,r){this.raw.update(t.raw,e.raw,r.raw)}castRay(t,e,r,i,n,s){let o=c.ut.intoRaw(e.origin),l=c.ut.intoRaw(e.dir),h=a.cu.fromRaw(t,this.raw.castRay(t.raw,o,l,r,i,n,s));return o.free(),l.free(),h}castRayAndGetNormal(t,e,r,i,n,s){let o=c.ut.intoRaw(e.origin),l=c.ut.intoRaw(e.dir),h=a.No.fromRaw(t,this.raw.castRayAndGetNormal(t.raw,o,l,r,i,n,s));return o.free(),l.free(),h}intersectionsWithRay(t,e,r,i,n,s,o){let l=c.ut.intoRaw(e.origin),h=c.ut.intoRaw(e.dir);this.raw.intersectionsWithRay(t.raw,l,h,r,i,n,(e=>s(a.No.fromRaw(t,e))),o),l.free(),h.free()}intersectionWithShape(t,e,r,i,n,a){let s=c.ut.intoRaw(e),o=c.T3.intoRaw(r),l=i.intoRaw(),h=this.raw.intersectionWithShape(t.raw,s,o,l,n,a);return s.free(),o.free(),l.free(),h}projectPoint(t,e,r,i,n){let a=c.ut.intoRaw(e),o=s.V.fromRaw(t,this.raw.projectPoint(t.raw,a,r,i,n));return a.free(),o}projectPointAndGetFeature(t,e,r){let i=c.ut.intoRaw(e),n=s.V.fromRaw(t,this.raw.projectPointAndGetFeature(t.raw,i,r));return i.free(),n}intersectionsWithPoint(t,e,r,i,n){let a=c.ut.intoRaw(e);this.raw.intersectionsWithPoint(t.raw,a,r,i,n),a.free()}castShape(t,e,r,i,n,a,s,l){let h=c.ut.intoRaw(e),d=c.T3.intoRaw(r),u=c.ut.intoRaw(i),p=n.intoRaw(),w=o.m.fromRaw(t,this.raw.castShape(t.raw,h,d,u,p,a,s,l));return h.free(),d.free(),u.free(),p.free(),w}intersectionsWithShape(t,e,r,i,n,a,s){let o=c.ut.intoRaw(e),l=c.T3.intoRaw(r),h=i.intoRaw();this.raw.intersectionsWithShape(t.raw,o,l,h,n,a,s),o.free(),l.free(),h.free()}collidersWithAabbIntersectingAabb(t,e,r){let i=c.ut.intoRaw(t),n=c.ut.intoRaw(e);this.raw.collidersWithAabbIntersectingAabb(i,n,r),i.free(),n.free()}}i()}catch(t){i(t)}}))},1301:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{y:()=>c});var n=r(2184),a=r(7383),s=r(2641),o=t([n,a,s]);[n,a,s]=o.then?(await o)():o;class c{constructor(t){this.raw=t||new n.w0}free(){this.raw.free(),this.raw=void 0}serializeAll(t,e,r,i,n,s,o,c,l){let h=a.ut.intoRaw(t);const d=this.raw.serializeAll(h,e.raw,r.raw,i.raw,n.raw,s.raw,o.raw,c.raw,l.raw);return h.free(),d}deserializeAll(t){return s.q.fromRaw(this.raw.deserializeAll(t))}}i()}catch(t){i(t)}}))},2641:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.d(e,{q:()=>b});var n=r(2261),a=r(1322),s=r(1927),o=r(6),c=r(7332),l=r(676),h=r(9206),d=r(8136),u=r(8448),p=r(7383),w=r(7064),_=r(5094),y=r(1301),f=r(8339),m=t([o,c,n,a,l,s,h,d,u,_,w,y,f,p]);[o,c,n,a,l,s,h,d,u,_,w,y,f,p]=m.then?(await m)():m;class b{constructor(t,e,r,i,p,m,b,g,R,v,S,C,T,I){this.gravity=t,this.integrationParameters=new o.R(e),this.islands=new c.y(r),this.broadPhase=new n.N(i),this.narrowPhase=new a.L(p),this.bodies=new l.r(m),this.colliders=new s.z(b),this.impulseJoints=new h.l(g),this.multibodyJoints=new d.h(R),this.ccdSolver=new u.K(v),this.queryPipeline=new _.V(S),this.physicsPipeline=new w.D(C),this.serializationPipeline=new y.y(T),this.debugRenderPipeline=new f.k(I),this.impulseJoints.finalizeDeserialization(this.bodies),this.bodies.finalizeDeserialization(this.colliders),this.colliders.finalizeDeserialization(this.bodies)}free(){this.integrationParameters.free(),this.islands.free(),this.broadPhase.free(),this.narrowPhase.free(),this.bodies.free(),this.colliders.free(),this.impulseJoints.free(),this.multibodyJoints.free(),this.ccdSolver.free(),this.queryPipeline.free(),this.physicsPipeline.free(),this.serializationPipeline.free(),this.debugRenderPipeline.free(),this.integrationParameters=void 0,this.islands=void 0,this.broadPhase=void 0,this.narrowPhase=void 0,this.bodies=void 0,this.colliders=void 0,this.ccdSolver=void 0,this.impulseJoints=void 0,this.multibodyJoints=void 0,this.queryPipeline=void 0,this.physicsPipeline=void 0,this.serializationPipeline=void 0,this.debugRenderPipeline=void 0}static fromRaw(t){return t?new b(p.ut.fromRaw(t.takeGravity()),t.takeIntegrationParameters(),t.takeIslandManager(),t.takeBroadPhase(),t.takeNarrowPhase(),t.takeBodies(),t.takeColliders(),t.takeImpulseJoints(),t.takeMultibodyJoints()):null}takeSnapshot(){return this.serializationPipeline.serializeAll(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints)}static restoreSnapshot(t){return(new y.y).deserializeAll(t)}debugRender(){return this.debugRenderPipeline.render(this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.narrowPhase),new f.t(this.debugRenderPipeline.vertices,this.debugRenderPipeline.colors)}step(t,e){this.physicsPipeline.step(this.gravity,this.integrationParameters,this.islands,this.broadPhase,this.narrowPhase,this.bodies,this.colliders,this.impulseJoints,this.multibodyJoints,this.ccdSolver,t,e),this.queryPipeline.update(this.islands,this.bodies,this.colliders)}get timestep(){return this.integrationParameters.dt}set timestep(t){this.integrationParameters.dt=t}get maxVelocityIterations(){return this.integrationParameters.maxVelocityIterations}set maxVelocityIterations(t){this.integrationParameters.maxVelocityIterations=t}get maxVelocityFrictionIterations(){return this.integrationParameters.maxVelocityFrictionIterations}set maxVelocityFrictionIterations(t){this.integrationParameters.maxVelocityFrictionIterations=t}get maxStabilizationIterations(){return this.integrationParameters.maxStabilizationIterations}set maxStabilizationIterations(t){this.integrationParameters.maxStabilizationIterations=t}createRigidBody(t){return this.bodies.createRigidBody(this.colliders,t)}createCollider(t,e){let r=e?e.handle:void 0;return this.colliders.createCollider(this.bodies,t,r)}createImpulseJoint(t,e,r,i){return this.impulseJoints.createJoint(this.bodies,t,e.handle,r.handle,i)}createMultibodyJoint(t,e,r,i){return this.multibodyJoints.createJoint(t,e.handle,r.handle,i)}getRigidBody(t){return this.bodies.get(t)}getCollider(t){return this.colliders.get(t)}getImpulseJoint(t){return this.impulseJoints.get(t)}getMultibodyJoint(t){return this.multibodyJoints.get(t)}removeRigidBody(t){this.bodies&&this.bodies.remove(t.handle,this.islands,this.colliders,this.impulseJoints,this.multibodyJoints)}removeCollider(t,e){this.colliders&&this.colliders.remove(t.handle,this.islands,this.bodies,e)}removeImpulseJoint(t,e){this.impulseJoints&&this.impulseJoints.remove(t.handle,e)}removeMultibodyJoint(t,e){this.impulseJoints&&this.multibodyJoints.remove(t.handle,e)}forEachCollider(t){this.colliders.forEach(t)}forEachRigidBody(t){this.bodies.forEach(t)}forEachActiveRigidBody(t){this.bodies.forEachActiveRigidBody(this.islands,t)}castRay(t,e,r,i,n){return this.queryPipeline.castRay(this.colliders,t,e,r,i,g(this.colliders,n))}castRayAndGetNormal(t,e,r,i,n){return this.queryPipeline.castRayAndGetNormal(this.colliders,t,e,r,i,g(this.colliders,n))}intersectionsWithRay(t,e,r,i,n,a){this.queryPipeline.intersectionsWithRay(this.colliders,t,e,r,i,n,g(this.colliders,a))}intersectionWithShape(t,e,r,i,n){let a=this.queryPipeline.intersectionWithShape(this.colliders,t,e,r,i,g(this.colliders,n));return null!=a?this.colliders.get(a):null}projectPoint(t,e,r,i){return this.queryPipeline.projectPoint(this.colliders,t,e,r,g(this.colliders,i))}projectPointAndGetFeature(t,e){return this.queryPipeline.projectPointAndGetFeature(this.colliders,t,e)}intersectionsWithPoint(t,e,r,i){this.queryPipeline.intersectionsWithPoint(this.colliders,t,e,g(this.colliders,r),g(this.colliders,i))}castShape(t,e,r,i,n,a,s){return this.queryPipeline.castShape(this.colliders,t,e,r,i,n,a,g(this.colliders,s))}intersectionsWithShape(t,e,r,i,n,a){this.queryPipeline.intersectionsWithShape(this.colliders,t,e,r,i,g(this.colliders,n),g(this.colliders,a))}collidersWithAabbIntersectingAabb(t,e,r){this.queryPipeline.collidersWithAabbIntersectingAabb(t,e,g(this.colliders,r))}contactsWith(t,e){this.narrowPhase.contactsWith(t.handle,g(this.colliders,e))}intersectionsWith(t,e){this.narrowPhase.intersectionsWith(t.handle,g(this.colliders,e))}contactPair(t,e,r){this.narrowPhase.contactPair(t.handle,e.handle,r)}intersectionPair(t,e){return this.narrowPhase.intersectionPair(t.handle,e.handle)}}function g(t,e){return r=>e?e(t.get(r)):void 0}i()}catch(R){i(R)}}))},5087:(t,e,r)=>{r.a(t,(async(t,i)=>{try{r.r(e),r.d(e,{ActiveCollisionTypes:()=>n.ActiveCollisionTypes,ActiveEvents:()=>n.ActiveEvents,ActiveHooks:()=>n.ActiveHooks,Ball:()=>n.Ball,BroadPhase:()=>n.BroadPhase,CCDSolver:()=>n.CCDSolver,Capsule:()=>n.Capsule,CoefficientCombineRule:()=>n.CoefficientCombineRule,Collider:()=>n.Collider,ColliderDesc:()=>n.ColliderDesc,ColliderSet:()=>n.ColliderSet,Cone:()=>n.Cone,ConvexPolyhedron:()=>n.ConvexPolyhedron,Cuboid:()=>n.Cuboid,Cylinder:()=>n.Cylinder,DebugRenderBuffers:()=>n.DebugRenderBuffers,DebugRenderPipeline:()=>n.DebugRenderPipeline,EventQueue:()=>n.EventQueue,FeatureType:()=>n.FeatureType,FixedImpulseJoint:()=>n.FixedImpulseJoint,FixedMultibodyJoint:()=>n.FixedMultibodyJoint,Heightfield:()=>n.Heightfield,ImpulseJoint:()=>n.ImpulseJoint,ImpulseJointSet:()=>n.ImpulseJointSet,IntegrationParameters:()=>n.IntegrationParameters,IslandManager:()=>n.IslandManager,JointData:()=>n.JointData,JointType:()=>n.JointType,MotorModel:()=>n.MotorModel,MultibodyJoint:()=>n.MultibodyJoint,MultibodyJointSet:()=>n.MultibodyJointSet,NarrowPhase:()=>n.NarrowPhase,PhysicsPipeline:()=>n.PhysicsPipeline,PointColliderProjection:()=>n.PointColliderProjection,PointProjection:()=>n.PointProjection,Polyline:()=>n.Polyline,PrismaticImpulseJoint:()=>n.PrismaticImpulseJoint,PrismaticMultibodyJoint:()=>n.PrismaticMultibodyJoint,Quaternion:()=>n.Quaternion,Ray:()=>n.Ray,RayColliderIntersection:()=>n.RayColliderIntersection,RayColliderToi:()=>n.RayColliderToi,RayIntersection:()=>n.RayIntersection,RevoluteImpulseJoint:()=>n.RevoluteImpulseJoint,RevoluteMultibodyJoint:()=>n.RevoluteMultibodyJoint,RigidBody:()=>n.RigidBody,RigidBodyDesc:()=>n.RigidBodyDesc,RigidBodySet:()=>n.RigidBodySet,RigidBodyType:()=>n.RigidBodyType,RotationOps:()=>n.RotationOps,RoundCone:()=>n.RoundCone,RoundConvexPolyhedron:()=>n.RoundConvexPolyhedron,RoundCuboid:()=>n.RoundCuboid,RoundCylinder:()=>n.RoundCylinder,RoundTriangle:()=>n.RoundTriangle,Segment:()=>n.Segment,SerializationPipeline:()=>n.SerializationPipeline,Shape:()=>n.Shape,ShapeColliderTOI:()=>n.ShapeColliderTOI,ShapeContact:()=>n.ShapeContact,ShapeTOI:()=>n.ShapeTOI,ShapeType:()=>n.ShapeType,SolverFlags:()=>n.SolverFlags,SphericalImpulseJoint:()=>n.SphericalImpulseJoint,SphericalMultibodyJoint:()=>n.SphericalMultibodyJoint,TempContactManifold:()=>n.TempContactManifold,TriMesh:()=>n.TriMesh,Triangle:()=>n.Triangle,UnitImpulseJoint:()=>n.UnitImpulseJoint,UnitMultibodyJoint:()=>n.UnitMultibodyJoint,Vector3:()=>n.Vector3,VectorOps:()=>n.VectorOps,World:()=>n.World,default:()=>s,version:()=>n.version});var n=r(2324),a=t([n]);const s=n=(a.then?(await a)():a)[0];i()}catch(t){i(t)}}))},2184:(t,e,r)=>{r.a(t,(async(i,n)=>{try{r.d(e,{$Z:()=>it,Dl:()=>It,EF:()=>gt,FU:()=>H,HT:()=>pt,IQ:()=>J,Ip:()=>St,Is:()=>W,JM:()=>F,LE:()=>D,M1:()=>ut,Ne:()=>wt,Oo:()=>Ct,Or:()=>Pt,Qc:()=>X,VR:()=>Rt,WF:()=>lt,X7:()=>at,XJ:()=>Tt,_F:()=>At,_q:()=>K,cQ:()=>L,cb:()=>vt,dm:()=>ft,eG:()=>bt,fY:()=>rt,fl:()=>q,i8:()=>R,n_:()=>mt,nv:()=>Z,o$:()=>_t,oH:()=>jt,oQ:()=>xt,pT:()=>dt,ry:()=>yt,uU:()=>U,ug:()=>ht,w0:()=>nt,wb:()=>N,we:()=>V,zu:()=>O});var a=r(3502);t=r.hmd(t);var s=i([a]);a=(s.then?(await s)():s)[0];const o=new Array(32).fill(void 0);function c(t){return o[t]}o.push(void 0,null,!0,!1);let l=o.length;function h(t){t<36||(o[t]=l,l=t)}function d(t){const e=c(t);return h(t),e}function u(t){l===o.length&&o.push(o.length+1);const e=l;return l=o[e],o[e]=t,e}function p(t){return null==t}let w=null;function _(){return null!==w&&w.buffer===a.memory.buffer||(w=new Float64Array(a.memory.buffer)),w}let y=null;function f(){return null!==y&&y.buffer===a.memory.buffer||(y=new Int32Array(a.memory.buffer)),y}let m=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});m.decode();let b=null;function g(t,e){return m.decode((null!==b&&b.buffer===a.memory.buffer||(b=new Uint8Array(a.memory.buffer)),b).subarray(t,t+e))}function R(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.version(r);var t=f()[r/4+0],e=f()[r/4+1];return g(t,e)}finally{a.__wbindgen_add_to_stack_pointer(16),a.__wbindgen_free(t,e)}}function v(t,e){if(!(t instanceof e))throw new Error(`expected instance of ${e.name}`);return t.ptr}let S=32;function C(t){if(1==S)throw new Error("out of js stack");return o[--S]=t,S}let T=null;function I(){return null!==T&&T.buffer===a.memory.buffer||(T=new Float32Array(a.memory.buffer)),T}function x(t,e){return I().subarray(t/4,t/4+e)}let A=null;function P(){return null!==A&&A.buffer===a.memory.buffer||(A=new Uint32Array(a.memory.buffer)),A}let j=0;function E(t,e){const r=e(4*t.length);return I().set(t,r/4),j=t.length,r}function M(t,e){const r=e(4*t.length);return P().set(t,r/4),j=t.length,r}function z(t,e){try{return t.apply(this,e)}catch(t){a.__wbindgen_exn_store(u(t))}}Object.freeze({Revolute:0,0:"Revolute",Fixed:1,1:"Fixed",Prismatic:2,2:"Prismatic",Spherical:3,3:"Spherical",Generic:4,4:"Generic"}),Object.freeze({AccelerationBased:0,0:"AccelerationBased",ForceBased:1,1:"ForceBased"});const F=Object.freeze({X:0,0:"X",Y:1,1:"Y",Z:2,2:"Z",AngX:3,3:"AngX",AngY:4,4:"AngY",AngZ:5,5:"AngZ"});Object.freeze({Dynamic:0,0:"Dynamic",Fixed:1,1:"Fixed",KinematicPositionBased:2,2:"KinematicPositionBased",KinematicVelocityBased:3,3:"KinematicVelocityBased"}),Object.freeze({Vertex:0,0:"Vertex",Edge:1,1:"Edge",Face:2,2:"Face",Unknown:3,3:"Unknown"}),Object.freeze({Ball:0,0:"Ball",Cuboid:1,1:"Cuboid",Capsule:2,2:"Capsule",Segment:3,3:"Segment",Polyline:4,4:"Polyline",Triangle:5,5:"Triangle",TriMesh:6,6:"TriMesh",HeightField:7,7:"HeightField",Compound:8,8:"Compound",ConvexPolyhedron:9,9:"ConvexPolyhedron",Cylinder:10,10:"Cylinder",Cone:11,11:"Cone",RoundCuboid:12,12:"RoundCuboid",RoundTriangle:13,13:"RoundTriangle",RoundCylinder:14,14:"RoundCylinder",RoundCone:15,15:"RoundCone",RoundConvexPolyhedron:16,16:"RoundConvexPolyhedron"});class H{static __wrap(t){const e=Object.create(H.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawbroadphase_free(t)}constructor(){const t=a.rawbroadphase_new();return H.__wrap(t)}}class D{static __wrap(t){const e=Object.create(D.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawccdsolver_free(t)}constructor(){const t=a.rawccdsolver_new();return D.__wrap(t)}}class J{static __wrap(t){const e=Object.create(J.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawcolliderset_free(t)}coTranslation(t){const e=a.rawcolliderset_coTranslation(this.ptr,t);return lt.__wrap(e)}coRotation(t){const e=a.rawcolliderset_coRotation(this.ptr,t);return it.__wrap(e)}coSetTranslation(t,e,r,i){a.rawcolliderset_coSetTranslation(this.ptr,t,e,r,i)}coSetTranslationWrtParent(t,e,r,i){a.rawcolliderset_coSetTranslationWrtParent(this.ptr,t,e,r,i)}coSetRotation(t,e,r,i,n){a.rawcolliderset_coSetRotation(this.ptr,t,e,r,i,n)}coSetRotationWrtParent(t,e,r,i,n){a.rawcolliderset_coSetRotationWrtParent(this.ptr,t,e,r,i,n)}coIsSensor(t){return 0!==a.rawcolliderset_coIsSensor(this.ptr,t)}coShapeType(t){return a.rawcolliderset_coShapeType(this.ptr,t)>>>0}coHalfExtents(t){const e=a.rawcolliderset_coHalfExtents(this.ptr,t);return 0===e?void 0:lt.__wrap(e)}coRadius(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coRadius(i,this.ptr,t);var e=f()[i/4+0],r=I()[i/4+1];return 0===e?void 0:r}finally{a.__wbindgen_add_to_stack_pointer(16)}}coHalfHeight(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coHalfHeight(i,this.ptr,t);var e=f()[i/4+0],r=I()[i/4+1];return 0===e?void 0:r}finally{a.__wbindgen_add_to_stack_pointer(16)}}coRoundRadius(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coRoundRadius(i,this.ptr,t);var e=f()[i/4+0],r=I()[i/4+1];return 0===e?void 0:r}finally{a.__wbindgen_add_to_stack_pointer(16)}}coVertices(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coVertices(i,this.ptr,t);var e=f()[i/4+0],r=f()[i/4+1];let n;return 0!==e&&(n=x(e,r).slice(),a.__wbindgen_free(e,4*r)),n}finally{a.__wbindgen_add_to_stack_pointer(16)}}coIndices(t){try{const s=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coIndices(s,this.ptr,t);var e=f()[s/4+0],r=f()[s/4+1];let o;return 0!==e&&(o=(i=e,n=r,P().subarray(i/4,i/4+n)).slice(),a.__wbindgen_free(e,4*r)),o}finally{a.__wbindgen_add_to_stack_pointer(16)}var i,n}coHeightfieldHeights(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coHeightfieldHeights(i,this.ptr,t);var e=f()[i/4+0],r=f()[i/4+1];let n;return 0!==e&&(n=x(e,r).slice(),a.__wbindgen_free(e,4*r)),n}finally{a.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldScale(t){const e=a.rawcolliderset_coHeightfieldScale(this.ptr,t);return 0===e?void 0:lt.__wrap(e)}coHeightfieldNRows(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coHeightfieldNRows(i,this.ptr,t);var e=f()[i/4+0],r=f()[i/4+1];return 0===e?void 0:r>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}coHeightfieldNCols(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coHeightfieldNCols(i,this.ptr,t);var e=f()[i/4+0],r=f()[i/4+1];return 0===e?void 0:r>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}coParent(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coParent(i,this.ptr,t);var e=f()[i/4+0],r=_()[i/8+1];return 0===e?void 0:r}finally{a.__wbindgen_add_to_stack_pointer(16)}}coFriction(t){return a.rawcolliderset_coFriction(this.ptr,t)}coRestitution(t){return a.rawcolliderset_coRestitution(this.ptr,t)}coDensity(t){try{const i=a.__wbindgen_add_to_stack_pointer(-16);a.rawcolliderset_coDensity(i,this.ptr,t);var e=f()[i/4+0],r=I()[i/4+1];return 0===e?void 0:r}finally{a.__wbindgen_add_to_stack_pointer(16)}}coCollisionGroups(t){return a.rawcolliderset_coCollisionGroups(this.ptr,t)>>>0}coSolverGroups(t){return a.rawcolliderset_coSolverGroups(this.ptr,t)>>>0}coActiveHooks(t){return a.rawcolliderset_coActiveHooks(this.ptr,t)>>>0}coActiveCollisionTypes(t){return a.rawcolliderset_coActiveCollisionTypes(this.ptr,t)}coActiveEvents(t){return a.rawcolliderset_coActiveEvents(this.ptr,t)>>>0}coContainsPoint(t,e){return v(e,lt),0!==a.rawcolliderset_coContainsPoint(this.ptr,t,e.ptr)}coCastShape(t,e,r,i,n,s,o){v(e,lt),v(r,at),v(i,lt),v(n,it),v(s,lt);const c=a.rawcolliderset_coCastShape(this.ptr,t,e.ptr,r.ptr,i.ptr,n.ptr,s.ptr,o);return 0===c?void 0:ct.__wrap(c)}coCastCollider(t,e,r,i,n){v(e,lt),v(i,lt);const s=a.rawcolliderset_coCastCollider(this.ptr,t,e.ptr,r,i.ptr,n);return 0===s?void 0:st.__wrap(s)}coIntersectsShape(t,e,r,i){return v(e,at),v(r,lt),v(i,it),0!==a.rawcolliderset_coIntersectsShape(this.ptr,t,e.ptr,r.ptr,i.ptr)}coContactShape(t,e,r,i,n){v(e,at),v(r,lt),v(i,it);const s=a.rawcolliderset_coContactShape(this.ptr,t,e.ptr,r.ptr,i.ptr,n);return 0===s?void 0:ot.__wrap(s)}coContactCollider(t,e,r){const i=a.rawcolliderset_coContactCollider(this.ptr,t,e,r);return 0===i?void 0:ot.__wrap(i)}coProjectPoint(t,e,r){v(e,lt);const i=a.rawcolliderset_coProjectPoint(this.ptr,t,e.ptr,r);return Q.__wrap(i)}coIntersectsRay(t,e,r,i){return v(e,lt),v(r,lt),0!==a.rawcolliderset_coIntersectsRay(this.ptr,t,e.ptr,r.ptr,i)}coCastRay(t,e,r,i,n){return v(e,lt),v(r,lt),a.rawcolliderset_coCastRay(this.ptr,t,e.ptr,r.ptr,i,n)}coCastRayAndGetNormal(t,e,r,i,n){v(e,lt),v(r,lt);const s=a.rawcolliderset_coCastRayAndGetNormal(this.ptr,t,e.ptr,r.ptr,i,n);return 0===s?void 0:et.__wrap(s)}coSetSensor(t,e){a.rawcolliderset_coSetSensor(this.ptr,t,e)}coSetRestitution(t,e){a.rawcolliderset_coSetRestitution(this.ptr,t,e)}coSetFriction(t,e){a.rawcolliderset_coSetFriction(this.ptr,t,e)}coFrictionCombineRule(t){return a.rawcolliderset_coFrictionCombineRule(this.ptr,t)>>>0}coSetFrictionCombineRule(t,e){a.rawcolliderset_coSetFrictionCombineRule(this.ptr,t,e)}coRestitutionCombineRule(t){return a.rawcolliderset_coRestitutionCombineRule(this.ptr,t)>>>0}coSetRestitutionCombineRule(t,e){a.rawcolliderset_coSetRestitutionCombineRule(this.ptr,t,e)}coSetCollisionGroups(t,e){a.rawcolliderset_coSetCollisionGroups(this.ptr,t,e)}coSetSolverGroups(t,e){a.rawcolliderset_coSetSolverGroups(this.ptr,t,e)}coSetActiveHooks(t,e){a.rawcolliderset_coSetActiveHooks(this.ptr,t,e)}coSetActiveEvents(t,e){a.rawcolliderset_coSetActiveEvents(this.ptr,t,e)}coSetActiveCollisionTypes(t,e){a.rawcolliderset_coSetActiveCollisionTypes(this.ptr,t,e)}coSetShape(t,e){v(e,at),a.rawcolliderset_coSetShape(this.ptr,t,e.ptr)}constructor(){const t=a.rawcolliderset_new();return J.__wrap(t)}len(){return a.rawcolliderset_len(this.ptr)>>>0}contains(t){return 0!==a.rawcolliderset_contains(this.ptr,t)}createCollider(t,e,r,i,n,s,o,c,l,h,d,u,p,w,y,m,b,g,R,S,C,T){try{const A=a.__wbindgen_add_to_stack_pointer(-16);v(t,at),v(e,lt),v(r,it),v(s,lt),v(o,lt),v(c,it),v(T,rt),a.rawcolliderset_createCollider(A,this.ptr,t.ptr,e.ptr,r.ptr,i,n,s.ptr,o.ptr,c.ptr,l,h,d,u,p,w,y,m,b,g,R,S,C,T.ptr);var I=f()[A/4+0],x=_()[A/8+1];return 0===I?void 0:x}finally{a.__wbindgen_add_to_stack_pointer(16)}}remove(t,e,r,i){v(e,W),v(r,rt),a.rawcolliderset_remove(this.ptr,t,e.ptr,r.ptr,i)}isHandleValid(t){return 0!==a.rawcolliderset_contains(this.ptr,t)}forEachColliderHandle(t){try{a.rawcolliderset_forEachColliderHandle(this.ptr,C(t))}finally{o[S++]=void 0}}}class k{static __wrap(t){const e=Object.create(k.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawcontactmanifold_free(t)}normal(){const t=a.rawcontactmanifold_normal(this.ptr);return lt.__wrap(t)}local_n1(){const t=a.rawcontactmanifold_local_n1(this.ptr);return lt.__wrap(t)}local_n2(){const t=a.rawcontactmanifold_local_n2(this.ptr);return lt.__wrap(t)}subshape1(){return a.rawcontactmanifold_subshape1(this.ptr)>>>0}subshape2(){return a.rawcontactmanifold_subshape2(this.ptr)>>>0}num_contacts(){return a.rawcontactmanifold_num_contacts(this.ptr)>>>0}contact_local_p1(t){const e=a.rawcontactmanifold_contact_local_p1(this.ptr,t);return 0===e?void 0:lt.__wrap(e)}contact_local_p2(t){const e=a.rawcontactmanifold_contact_local_p2(this.ptr,t);return 0===e?void 0:lt.__wrap(e)}contact_dist(t){return a.rawcontactmanifold_contact_dist(this.ptr,t)}contact_fid1(t){return a.rawcontactmanifold_contact_fid1(this.ptr,t)>>>0}contact_fid2(t){return a.rawcontactmanifold_contact_fid2(this.ptr,t)>>>0}contact_impulse(t){return a.rawcontactmanifold_contact_impulse(this.ptr,t)}contact_tangent_impulse_x(t){return a.rawcontactmanifold_contact_tangent_impulse_x(this.ptr,t)}contact_tangent_impulse_y(t){return a.rawcontactmanifold_contact_tangent_impulse_y(this.ptr,t)}num_solver_contacts(){return a.rawcontactmanifold_num_solver_contacts(this.ptr)>>>0}solver_contact_point(t){const e=a.rawcontactmanifold_solver_contact_point(this.ptr,t);return 0===e?void 0:lt.__wrap(e)}solver_contact_dist(t){return a.rawcontactmanifold_solver_contact_dist(this.ptr,t)}solver_contact_friction(t){return a.rawcontactmanifold_solver_contact_friction(this.ptr,t)}solver_contact_restitution(t){return a.rawcontactmanifold_solver_contact_restitution(this.ptr,t)}solver_contact_tangent_velocity(t){const e=a.rawcontactmanifold_solver_contact_tangent_velocity(this.ptr,t);return lt.__wrap(e)}}class B{static __wrap(t){const e=Object.create(B.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawcontactpair_free(t)}collider1(){return a.rawcontactpair_collider1(this.ptr)}collider2(){return a.rawcontactpair_collider2(this.ptr)}numContactManifolds(){return a.rawcontactpair_numContactManifolds(this.ptr)>>>0}contactManifold(t){const e=a.rawcontactpair_contactManifold(this.ptr,t);return 0===e?void 0:k.__wrap(e)}}class N{static __wrap(t){const e=Object.create(N.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawdebugrenderpipeline_free(t)}constructor(){const t=a.rawdebugrenderpipeline_new();return N.__wrap(t)}vertices(){return d(a.rawdebugrenderpipeline_vertices(this.ptr))}colors(){return d(a.rawdebugrenderpipeline_colors(this.ptr))}render(t,e,r,i,n){v(t,rt),v(e,J),v(r,X),v(i,q),v(n,U),a.rawdebugrenderpipeline_render(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n.ptr)}}class G{static __wrap(t){const e=Object.create(G.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawdeserializedworld_free(t)}takeGravity(){const t=a.rawdeserializedworld_takeGravity(this.ptr);return 0===t?void 0:lt.__wrap(t)}takeIntegrationParameters(){const t=a.rawdeserializedworld_takeIntegrationParameters(this.ptr);return 0===t?void 0:O.__wrap(t)}takeIslandManager(){const t=a.rawdeserializedworld_takeIslandManager(this.ptr);return 0===t?void 0:W.__wrap(t)}takeBroadPhase(){const t=a.rawdeserializedworld_takeBroadPhase(this.ptr);return 0===t?void 0:H.__wrap(t)}takeNarrowPhase(){const t=a.rawdeserializedworld_takeNarrowPhase(this.ptr);return 0===t?void 0:U.__wrap(t)}takeBodies(){const t=a.rawdeserializedworld_takeBodies(this.ptr);return 0===t?void 0:rt.__wrap(t)}takeColliders(){const t=a.rawdeserializedworld_takeColliders(this.ptr);return 0===t?void 0:J.__wrap(t)}takeImpulseJoints(){const t=a.rawdeserializedworld_takeImpulseJoints(this.ptr);return 0===t?void 0:X.__wrap(t)}takeMultibodyJoints(){const t=a.rawdeserializedworld_takeMultibodyJoints(this.ptr);return 0===t?void 0:q.__wrap(t)}}class V{static __wrap(t){const e=Object.create(V.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_raweventqueue_free(t)}constructor(t){const e=a.raweventqueue_new(t);return V.__wrap(e)}drainCollisionEvents(t){try{a.raweventqueue_drainCollisionEvents(this.ptr,C(t))}finally{o[S++]=void 0}}clear(){a.raweventqueue_clear(this.ptr)}}class L{static __wrap(t){const e=Object.create(L.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawgenericjoint_free(t)}static spherical(t,e){v(t,lt),v(e,lt);const r=a.rawgenericjoint_spherical(t.ptr,e.ptr);return L.__wrap(r)}static prismatic(t,e,r,i,n,s){v(t,lt),v(e,lt),v(r,lt);const o=a.rawgenericjoint_prismatic(t.ptr,e.ptr,r.ptr,i,n,s);return 0===o?void 0:L.__wrap(o)}static fixed(t,e,r,i){v(t,lt),v(e,it),v(r,lt),v(i,it);const n=a.rawgenericjoint_fixed(t.ptr,e.ptr,r.ptr,i.ptr);return L.__wrap(n)}static revolute(t,e,r){v(t,lt),v(e,lt),v(r,lt);const i=a.rawgenericjoint_revolute(t.ptr,e.ptr,r.ptr);return 0===i?void 0:L.__wrap(i)}}class X{static __wrap(t){const e=Object.create(X.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawimpulsejointset_free(t)}jointType(t){return a.rawimpulsejointset_jointType(this.ptr,t)>>>0}jointBodyHandle1(t){return a.rawimpulsejointset_jointBodyHandle1(this.ptr,t)}jointBodyHandle2(t){return a.rawimpulsejointset_jointBodyHandle2(this.ptr,t)}jointFrameX1(t){const e=a.rawimpulsejointset_jointFrameX1(this.ptr,t);return it.__wrap(e)}jointFrameX2(t){const e=a.rawimpulsejointset_jointFrameX2(this.ptr,t);return it.__wrap(e)}jointAnchor1(t){const e=a.rawimpulsejointset_jointAnchor1(this.ptr,t);return lt.__wrap(e)}jointAnchor2(t){const e=a.rawimpulsejointset_jointAnchor2(this.ptr,t);return lt.__wrap(e)}jointLimitsEnabled(t,e){return 0!==a.rawimpulsejointset_jointLimitsEnabled(this.ptr,t,e)}jointLimitsMin(t,e){return a.rawimpulsejointset_jointLimitsMin(this.ptr,t,e)}jointLimitsMax(t,e){return a.rawimpulsejointset_jointLimitsMax(this.ptr,t,e)}jointConfigureMotorModel(t,e,r){a.rawimpulsejointset_jointConfigureMotorModel(this.ptr,t,e,r)}jointConfigureMotorVelocity(t,e,r,i){a.rawimpulsejointset_jointConfigureMotorVelocity(this.ptr,t,e,r,i)}jointConfigureMotorPosition(t,e,r,i,n){a.rawimpulsejointset_jointConfigureMotorPosition(this.ptr,t,e,r,i,n)}jointConfigureMotor(t,e,r,i,n,s){a.rawimpulsejointset_jointConfigureMotor(this.ptr,t,e,r,i,n,s)}constructor(){const t=a.rawimpulsejointset_new();return X.__wrap(t)}createJoint(t,e,r,i){return v(t,L),a.rawimpulsejointset_createJoint(this.ptr,t.ptr,e,r,i)}remove(t,e){a.rawimpulsejointset_remove(this.ptr,t,e)}len(){return a.rawimpulsejointset_len(this.ptr)>>>0}contains(t){return 0!==a.rawimpulsejointset_contains(this.ptr,t)}forEachJointHandle(t){try{a.rawimpulsejointset_forEachJointHandle(this.ptr,C(t))}finally{o[S++]=void 0}}forEachJointAttachedToRigidBody(t,e){try{a.rawimpulsejointset_forEachJointAttachedToRigidBody(this.ptr,t,C(e))}finally{o[S++]=void 0}}}class O{static __wrap(t){const e=Object.create(O.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawintegrationparameters_free(t)}constructor(){const t=a.rawintegrationparameters_new();return O.__wrap(t)}get dt(){return a.rawintegrationparameters_dt(this.ptr)}get erp(){return a.rawintegrationparameters_erp(this.ptr)}get allowedLinearError(){return a.rawintegrationparameters_allowedLinearError(this.ptr)}get predictionDistance(){return a.rawintegrationparameters_predictionDistance(this.ptr)}get maxVelocityIterations(){return a.rawintegrationparameters_maxVelocityIterations(this.ptr)>>>0}get maxVelocityFrictionIterations(){return a.rawintegrationparameters_maxVelocityFrictionIterations(this.ptr)>>>0}get maxStabilizationIterations(){return a.rawintegrationparameters_maxStabilizationIterations(this.ptr)>>>0}get minIslandSize(){return a.rawintegrationparameters_minIslandSize(this.ptr)>>>0}get maxCcdSubsteps(){return a.rawintegrationparameters_maxCcdSubsteps(this.ptr)>>>0}set dt(t){a.rawintegrationparameters_set_dt(this.ptr,t)}set erp(t){a.rawintegrationparameters_set_erp(this.ptr,t)}set allowedLinearError(t){a.rawintegrationparameters_set_allowedLinearError(this.ptr,t)}set predictionDistance(t){a.rawintegrationparameters_set_predictionDistance(this.ptr,t)}set maxVelocityIterations(t){a.rawintegrationparameters_set_maxVelocityIterations(this.ptr,t)}set maxVelocityFrictionIterations(t){a.rawintegrationparameters_set_maxVelocityFrictionIterations(this.ptr,t)}set maxStabilizationIterations(t){a.rawintegrationparameters_set_maxStabilizationIterations(this.ptr,t)}set minIslandSize(t){a.rawintegrationparameters_set_minIslandSize(this.ptr,t)}set maxCcdSubsteps(t){a.rawintegrationparameters_set_maxCcdSubsteps(this.ptr,t)}}class W{static __wrap(t){const e=Object.create(W.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawislandmanager_free(t)}constructor(){const t=a.rawislandmanager_new();return W.__wrap(t)}forEachActiveRigidBodyHandle(t){try{a.rawislandmanager_forEachActiveRigidBodyHandle(this.ptr,C(t))}finally{o[S++]=void 0}}}class q{static __wrap(t){const e=Object.create(q.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawmultibodyjointset_free(t)}jointType(t){return a.rawmultibodyjointset_jointType(this.ptr,t)>>>0}jointFrameX1(t){const e=a.rawmultibodyjointset_jointFrameX1(this.ptr,t);return it.__wrap(e)}jointFrameX2(t){const e=a.rawmultibodyjointset_jointFrameX2(this.ptr,t);return it.__wrap(e)}jointAnchor1(t){const e=a.rawmultibodyjointset_jointAnchor1(this.ptr,t);return lt.__wrap(e)}jointAnchor2(t){const e=a.rawmultibodyjointset_jointAnchor2(this.ptr,t);return lt.__wrap(e)}jointLimitsEnabled(t,e){return 0!==a.rawmultibodyjointset_jointLimitsEnabled(this.ptr,t,e)}jointLimitsMin(t,e){return a.rawmultibodyjointset_jointLimitsMin(this.ptr,t,e)}jointLimitsMax(t,e){return a.rawmultibodyjointset_jointLimitsMax(this.ptr,t,e)}constructor(){const t=a.rawmultibodyjointset_new();return q.__wrap(t)}createJoint(t,e,r,i){return v(t,L),a.rawmultibodyjointset_createJoint(this.ptr,t.ptr,e,r,i)}remove(t,e){a.rawmultibodyjointset_remove(this.ptr,t,e)}contains(t){return 0!==a.rawmultibodyjointset_contains(this.ptr,t)}forEachJointHandle(t){try{a.rawmultibodyjointset_forEachJointHandle(this.ptr,C(t))}finally{o[S++]=void 0}}forEachJointAttachedToRigidBody(t,e){try{a.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.ptr,t,C(e))}finally{o[S++]=void 0}}}class U{static __wrap(t){const e=Object.create(U.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawnarrowphase_free(t)}constructor(){const t=a.rawnarrowphase_new();return U.__wrap(t)}contacts_with(t,e){a.rawnarrowphase_contacts_with(this.ptr,t,u(e))}contact_pair(t,e){const r=a.rawnarrowphase_contact_pair(this.ptr,t,e);return 0===r?void 0:B.__wrap(r)}intersections_with(t,e){a.rawnarrowphase_intersections_with(this.ptr,t,u(e))}intersection_pair(t,e){return 0!==a.rawnarrowphase_intersection_pair(this.ptr,t,e)}}class K{static __wrap(t){const e=Object.create(K.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawphysicspipeline_free(t)}constructor(){const t=a.rawphysicspipeline_new();return K.__wrap(t)}step(t,e,r,i,n,s,o,c,l,h){v(t,lt),v(e,O),v(r,W),v(i,H),v(n,U),v(s,rt),v(o,J),v(c,X),v(l,q),v(h,D),a.rawphysicspipeline_step(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n.ptr,s.ptr,o.ptr,c.ptr,l.ptr,h.ptr)}stepWithEvents(t,e,r,i,n,s,o,c,l,h,d,p,w,_){v(t,lt),v(e,O),v(r,W),v(i,H),v(n,U),v(s,rt),v(o,J),v(c,X),v(l,q),v(h,D),v(d,V),a.rawphysicspipeline_stepWithEvents(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n.ptr,s.ptr,o.ptr,c.ptr,l.ptr,h.ptr,d.ptr,u(p),u(w),u(_))}}class Y{static __wrap(t){const e=Object.create(Y.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawpointcolliderprojection_free(t)}colliderHandle(){return a.rawpointcolliderprojection_colliderHandle(this.ptr)}point(){const t=a.rawpointcolliderprojection_point(this.ptr);return lt.__wrap(t)}isInside(){return 0!==a.rawpointcolliderprojection_isInside(this.ptr)}featureType(){return a.rawpointcolliderprojection_featureType(this.ptr)>>>0}featureId(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.rawpointcolliderprojection_featureId(r,this.ptr);var t=f()[r/4+0],e=f()[r/4+1];return 0===t?void 0:e>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class Q{static __wrap(t){const e=Object.create(Q.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawpointprojection_free(t)}point(){const t=a.rawpointprojection_point(this.ptr);return lt.__wrap(t)}isInside(){return 0!==a.rawpointprojection_isInside(this.ptr)}}class Z{static __wrap(t){const e=Object.create(Z.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawquerypipeline_free(t)}constructor(){const t=a.rawquerypipeline_new();return Z.__wrap(t)}update(t,e,r){v(t,W),v(e,rt),v(r,J),a.rawquerypipeline_update(this.ptr,t.ptr,e.ptr,r.ptr)}castRay(t,e,r,i,n,s,c){try{v(t,J),v(e,lt),v(r,lt);const l=a.rawquerypipeline_castRay(this.ptr,t.ptr,e.ptr,r.ptr,i,n,s,C(c));return 0===l?void 0:tt.__wrap(l)}finally{o[S++]=void 0}}castRayAndGetNormal(t,e,r,i,n,s,c){try{v(t,J),v(e,lt),v(r,lt);const l=a.rawquerypipeline_castRayAndGetNormal(this.ptr,t.ptr,e.ptr,r.ptr,i,n,s,C(c));return 0===l?void 0:$.__wrap(l)}finally{o[S++]=void 0}}intersectionsWithRay(t,e,r,i,n,s,c,l){try{v(t,J),v(e,lt),v(r,lt),a.rawquerypipeline_intersectionsWithRay(this.ptr,t.ptr,e.ptr,r.ptr,i,n,s,C(c),C(l))}finally{o[S++]=void 0,o[S++]=void 0}}intersectionWithShape(t,e,r,i,n,s){try{const h=a.__wbindgen_add_to_stack_pointer(-16);v(t,J),v(e,lt),v(r,it),v(i,at),a.rawquerypipeline_intersectionWithShape(h,this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n,C(s));var c=f()[h/4+0],l=_()[h/8+1];return 0===c?void 0:l}finally{a.__wbindgen_add_to_stack_pointer(16),o[S++]=void 0}}projectPoint(t,e,r,i,n){try{v(t,J),v(e,lt);const s=a.rawquerypipeline_projectPoint(this.ptr,t.ptr,e.ptr,r,i,C(n));return 0===s?void 0:Y.__wrap(s)}finally{o[S++]=void 0}}projectPointAndGetFeature(t,e,r){v(t,J),v(e,lt);const i=a.rawquerypipeline_projectPointAndGetFeature(this.ptr,t.ptr,e.ptr,r);return 0===i?void 0:Y.__wrap(i)}intersectionsWithPoint(t,e,r,i,n){try{v(t,J),v(e,lt),a.rawquerypipeline_intersectionsWithPoint(this.ptr,t.ptr,e.ptr,r,C(i),C(n))}finally{o[S++]=void 0,o[S++]=void 0}}castShape(t,e,r,i,n,s,c,l){try{v(t,J),v(e,lt),v(r,it),v(i,lt),v(n,at);const h=a.rawquerypipeline_castShape(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n.ptr,s,c,C(l));return 0===h?void 0:st.__wrap(h)}finally{o[S++]=void 0}}intersectionsWithShape(t,e,r,i,n,s,c){try{v(t,J),v(e,lt),v(r,it),v(i,at),a.rawquerypipeline_intersectionsWithShape(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n,C(s),C(c))}finally{o[S++]=void 0,o[S++]=void 0}}collidersWithAabbIntersectingAabb(t,e,r){try{v(t,lt),v(e,lt),a.rawquerypipeline_collidersWithAabbIntersectingAabb(this.ptr,t.ptr,e.ptr,C(r))}finally{o[S++]=void 0}}}class ${static __wrap(t){const e=Object.create($.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawraycolliderintersection_free(t)}colliderHandle(){return a.rawpointcolliderprojection_colliderHandle(this.ptr)}normal(){const t=a.rawraycolliderintersection_normal(this.ptr);return lt.__wrap(t)}toi(){return a.rawraycolliderintersection_toi(this.ptr)}featureType(){return a.rawpointcolliderprojection_featureType(this.ptr)>>>0}featureId(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.rawpointcolliderprojection_featureId(r,this.ptr);var t=f()[r/4+0],e=f()[r/4+1];return 0===t?void 0:e>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class tt{static __wrap(t){const e=Object.create(tt.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawraycollidertoi_free(t)}colliderHandle(){return a.rawpointcolliderprojection_colliderHandle(this.ptr)}toi(){return a.rawraycolliderintersection_toi(this.ptr)}}class et{static __wrap(t){const e=Object.create(et.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawrayintersection_free(t)}normal(){const t=a.rawrayintersection_normal(this.ptr);return lt.__wrap(t)}toi(){return a.rawintegrationparameters_dt(this.ptr)}featureType(){return a.rawrayintersection_featureType(this.ptr)>>>0}featureId(){try{const r=a.__wbindgen_add_to_stack_pointer(-16);a.rawrayintersection_featureId(r,this.ptr);var t=f()[r/4+0],e=f()[r/4+1];return 0===t?void 0:e>>>0}finally{a.__wbindgen_add_to_stack_pointer(16)}}}class rt{static __wrap(t){const e=Object.create(rt.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawrigidbodyset_free(t)}rbTranslation(t){const e=a.rawrigidbodyset_rbTranslation(this.ptr,t);return lt.__wrap(e)}rbRotation(t){const e=a.rawrigidbodyset_rbRotation(this.ptr,t);return it.__wrap(e)}rbSleep(t){a.rawrigidbodyset_rbSleep(this.ptr,t)}rbIsSleeping(t){return 0!==a.rawrigidbodyset_rbIsSleeping(this.ptr,t)}rbIsMoving(t){return 0!==a.rawrigidbodyset_rbIsMoving(this.ptr,t)}rbNextTranslation(t){const e=a.rawrigidbodyset_rbNextTranslation(this.ptr,t);return lt.__wrap(e)}rbNextRotation(t){const e=a.rawrigidbodyset_rbNextRotation(this.ptr,t);return it.__wrap(e)}rbSetTranslation(t,e,r,i,n){a.rawrigidbodyset_rbSetTranslation(this.ptr,t,e,r,i,n)}rbSetRotation(t,e,r,i,n,s){a.rawrigidbodyset_rbSetRotation(this.ptr,t,e,r,i,n,s)}rbSetLinvel(t,e,r){v(e,lt),a.rawrigidbodyset_rbSetLinvel(this.ptr,t,e.ptr,r)}rbSetAngvel(t,e,r){v(e,lt),a.rawrigidbodyset_rbSetAngvel(this.ptr,t,e.ptr,r)}rbSetNextKinematicTranslation(t,e,r,i){a.rawrigidbodyset_rbSetNextKinematicTranslation(this.ptr,t,e,r,i)}rbSetNextKinematicRotation(t,e,r,i,n){a.rawrigidbodyset_rbSetNextKinematicRotation(this.ptr,t,e,r,i,n)}rbLinvel(t){const e=a.rawrigidbodyset_rbLinvel(this.ptr,t);return lt.__wrap(e)}rbAngvel(t){const e=a.rawrigidbodyset_rbAngvel(this.ptr,t);return lt.__wrap(e)}rbLockTranslations(t,e,r){a.rawrigidbodyset_rbLockTranslations(this.ptr,t,e,r)}rbRestrictTranslations(t,e,r,i,n){a.rawrigidbodyset_rbRestrictTranslations(this.ptr,t,e,r,i,n)}rbLockRotations(t,e,r){a.rawrigidbodyset_rbLockRotations(this.ptr,t,e,r)}rbRestrictRotations(t,e,r,i,n){a.rawrigidbodyset_rbRestrictRotations(this.ptr,t,e,r,i,n)}rbDominanceGroup(t){return a.rawrigidbodyset_rbDominanceGroup(this.ptr,t)}rbSetDominanceGroup(t,e){a.rawrigidbodyset_rbSetDominanceGroup(this.ptr,t,e)}rbEnableCcd(t,e){a.rawrigidbodyset_rbEnableCcd(this.ptr,t,e)}rbMass(t){return a.rawrigidbodyset_rbMass(this.ptr,t)}rbWakeUp(t){a.rawrigidbodyset_rbWakeUp(this.ptr,t)}rbIsCcdEnabled(t){return 0!==a.rawrigidbodyset_rbIsCcdEnabled(this.ptr,t)}rbNumColliders(t){return a.rawrigidbodyset_rbNumColliders(this.ptr,t)>>>0}rbCollider(t,e){return a.rawrigidbodyset_rbCollider(this.ptr,t,e)}rbBodyType(t){return a.rawrigidbodyset_rbBodyType(this.ptr,t)>>>0}rbSetBodyType(t,e){a.rawrigidbodyset_rbSetBodyType(this.ptr,t,e)}rbIsFixed(t){return 0!==a.rawrigidbodyset_rbIsFixed(this.ptr,t)}rbIsKinematic(t){return 0!==a.rawrigidbodyset_rbIsKinematic(this.ptr,t)}rbIsDynamic(t){return 0!==a.rawrigidbodyset_rbIsDynamic(this.ptr,t)}rbLinearDamping(t){return a.rawrigidbodyset_rbLinearDamping(this.ptr,t)}rbAngularDamping(t){return a.rawrigidbodyset_rbAngularDamping(this.ptr,t)}rbSetLinearDamping(t,e){a.rawrigidbodyset_rbSetLinearDamping(this.ptr,t,e)}rbSetAngularDamping(t,e){a.rawrigidbodyset_rbSetAngularDamping(this.ptr,t,e)}rbGravityScale(t){return a.rawrigidbodyset_rbGravityScale(this.ptr,t)}rbSetGravityScale(t,e,r){a.rawrigidbodyset_rbSetGravityScale(this.ptr,t,e,r)}rbResetForces(t,e){a.rawrigidbodyset_rbResetForces(this.ptr,t,e)}rbResetTorques(t,e){a.rawrigidbodyset_rbResetTorques(this.ptr,t,e)}rbAddForce(t,e,r){v(e,lt),a.rawrigidbodyset_rbAddForce(this.ptr,t,e.ptr,r)}rbApplyImpulse(t,e,r){v(e,lt),a.rawrigidbodyset_rbApplyImpulse(this.ptr,t,e.ptr,r)}rbAddTorque(t,e,r){v(e,lt),a.rawrigidbodyset_rbAddTorque(this.ptr,t,e.ptr,r)}rbApplyTorqueImpulse(t,e,r){v(e,lt),a.rawrigidbodyset_rbApplyTorqueImpulse(this.ptr,t,e.ptr,r)}rbAddForceAtPoint(t,e,r,i){v(e,lt),v(r,lt),a.rawrigidbodyset_rbAddForceAtPoint(this.ptr,t,e.ptr,r.ptr,i)}rbApplyImpulseAtPoint(t,e,r,i){v(e,lt),v(r,lt),a.rawrigidbodyset_rbApplyImpulseAtPoint(this.ptr,t,e.ptr,r.ptr,i)}rbUserData(t){return a.rawrigidbodyset_rbUserData(this.ptr,t)>>>0}rbSetUserData(t,e){a.rawrigidbodyset_rbSetUserData(this.ptr,t,e)}constructor(){const t=a.rawrigidbodyset_new();return rt.__wrap(t)}createRigidBody(t,e,r,i,n,s,o,c,l,h,d,u,p,w,_,y,f,m,b,g,R,S){return v(t,lt),v(e,it),v(n,lt),v(s,lt),v(o,lt),v(c,lt),v(l,it),a.rawrigidbodyset_createRigidBody(this.ptr,t.ptr,e.ptr,r,i,n.ptr,s.ptr,o.ptr,c.ptr,l.ptr,h,d,u,p,w,_,y,f,m,b,g,R,S)}remove(t,e,r,i,n){v(e,W),v(r,J),v(i,X),v(n,q),a.rawrigidbodyset_remove(this.ptr,t,e.ptr,r.ptr,i.ptr,n.ptr)}len(){return a.rawrigidbodyset_len(this.ptr)>>>0}contains(t){return 0!==a.rawrigidbodyset_contains(this.ptr,t)}forEachRigidBodyHandle(t){try{a.rawrigidbodyset_forEachRigidBodyHandle(this.ptr,C(t))}finally{o[S++]=void 0}}}class it{static __wrap(t){const e=Object.create(it.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawrotation_free(t)}constructor(t,e,r,i){const n=a.rawrotation_new(t,e,r,i);return it.__wrap(n)}static identity(){const t=a.rawrotation_identity();return it.__wrap(t)}get x(){return a.rawintegrationparameters_dt(this.ptr)}get y(){return a.rawrotation_y(this.ptr)}get z(){return a.rawintegrationparameters_erp(this.ptr)}get w(){return a.rawrotation_w(this.ptr)}}class nt{static __wrap(t){const e=Object.create(nt.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawserializationpipeline_free(t)}constructor(){const t=a.rawserializationpipeline_new();return nt.__wrap(t)}serializeAll(t,e,r,i,n,s,o,c,l){return v(t,lt),v(e,O),v(r,W),v(i,H),v(n,U),v(s,rt),v(o,J),v(c,X),v(l,q),d(a.rawserializationpipeline_serializeAll(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n.ptr,s.ptr,o.ptr,c.ptr,l.ptr))}deserializeAll(t){const e=a.rawserializationpipeline_deserializeAll(this.ptr,u(t));return 0===e?void 0:G.__wrap(e)}}class at{static __wrap(t){const e=Object.create(at.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawshape_free(t)}static cuboid(t,e,r){const i=a.rawshape_cuboid(t,e,r);return at.__wrap(i)}static roundCuboid(t,e,r,i){const n=a.rawshape_roundCuboid(t,e,r,i);return at.__wrap(n)}static ball(t){const e=a.rawshape_ball(t);return at.__wrap(e)}static capsule(t,e){const r=a.rawshape_capsule(t,e);return at.__wrap(r)}static cylinder(t,e){const r=a.rawshape_cylinder(t,e);return at.__wrap(r)}static roundCylinder(t,e,r){const i=a.rawshape_roundCylinder(t,e,r);return at.__wrap(i)}static cone(t,e){const r=a.rawshape_cone(t,e);return at.__wrap(r)}static roundCone(t,e,r){const i=a.rawshape_roundCone(t,e,r);return at.__wrap(i)}static polyline(t,e){const r=E(t,a.__wbindgen_malloc),i=j,n=M(e,a.__wbindgen_malloc),s=j,o=a.rawshape_polyline(r,i,n,s);return at.__wrap(o)}static trimesh(t,e){const r=E(t,a.__wbindgen_malloc),i=j,n=M(e,a.__wbindgen_malloc),s=j,o=a.rawshape_trimesh(r,i,n,s);return at.__wrap(o)}static heightfield(t,e,r,i){const n=E(r,a.__wbindgen_malloc),s=j;v(i,lt);const o=a.rawshape_heightfield(t,e,n,s,i.ptr);return at.__wrap(o)}static segment(t,e){v(t,lt),v(e,lt);const r=a.rawshape_segment(t.ptr,e.ptr);return at.__wrap(r)}static triangle(t,e,r){v(t,lt),v(e,lt),v(r,lt);const i=a.rawshape_triangle(t.ptr,e.ptr,r.ptr);return at.__wrap(i)}static roundTriangle(t,e,r,i){v(t,lt),v(e,lt),v(r,lt);const n=a.rawshape_roundTriangle(t.ptr,e.ptr,r.ptr,i);return at.__wrap(n)}static convexHull(t){const e=E(t,a.__wbindgen_malloc),r=j,i=a.rawshape_convexHull(e,r);return 0===i?void 0:at.__wrap(i)}static roundConvexHull(t,e){const r=E(t,a.__wbindgen_malloc),i=j,n=a.rawshape_roundConvexHull(r,i,e);return 0===n?void 0:at.__wrap(n)}static convexMesh(t,e){const r=E(t,a.__wbindgen_malloc),i=j,n=M(e,a.__wbindgen_malloc),s=j,o=a.rawshape_convexMesh(r,i,n,s);return 0===o?void 0:at.__wrap(o)}static roundConvexMesh(t,e,r){const i=E(t,a.__wbindgen_malloc),n=j,s=M(e,a.__wbindgen_malloc),o=j,c=a.rawshape_roundConvexMesh(i,n,s,o,r);return 0===c?void 0:at.__wrap(c)}castShape(t,e,r,i,n,s,o,c){v(t,lt),v(e,it),v(r,lt),v(i,at),v(n,lt),v(s,it),v(o,lt);const l=a.rawshape_castShape(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n.ptr,s.ptr,o.ptr,c);return 0===l?void 0:ct.__wrap(l)}intersectsShape(t,e,r,i,n){return v(t,lt),v(e,it),v(r,at),v(i,lt),v(n,it),0!==a.rawshape_intersectsShape(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n.ptr)}contactShape(t,e,r,i,n,s){v(t,lt),v(e,it),v(r,at),v(i,lt),v(n,it);const o=a.rawshape_contactShape(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n.ptr,s);return 0===o?void 0:ot.__wrap(o)}containsPoint(t,e,r){return v(t,lt),v(e,it),v(r,lt),0!==a.rawshape_containsPoint(this.ptr,t.ptr,e.ptr,r.ptr)}projectPoint(t,e,r,i){v(t,lt),v(e,it),v(r,lt);const n=a.rawshape_projectPoint(this.ptr,t.ptr,e.ptr,r.ptr,i);return Q.__wrap(n)}intersectsRay(t,e,r,i,n){return v(t,lt),v(e,it),v(r,lt),v(i,lt),0!==a.rawshape_intersectsRay(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n)}castRay(t,e,r,i,n,s){return v(t,lt),v(e,it),v(r,lt),v(i,lt),a.rawshape_castRay(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n,s)}castRayAndGetNormal(t,e,r,i,n,s){v(t,lt),v(e,it),v(r,lt),v(i,lt);const o=a.rawshape_castRayAndGetNormal(this.ptr,t.ptr,e.ptr,r.ptr,i.ptr,n,s);return 0===o?void 0:et.__wrap(o)}}class st{static __wrap(t){const e=Object.create(st.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawshapecollidertoi_free(t)}colliderHandle(){return a.rawpointcolliderprojection_colliderHandle(this.ptr)}toi(){return a.rawraycolliderintersection_toi(this.ptr)}witness1(){const t=a.rawraycolliderintersection_normal(this.ptr);return lt.__wrap(t)}witness2(){const t=a.rawshapecollidertoi_witness2(this.ptr);return lt.__wrap(t)}normal1(){const t=a.rawshapecollidertoi_normal1(this.ptr);return lt.__wrap(t)}normal2(){const t=a.rawshapecollidertoi_normal2(this.ptr);return lt.__wrap(t)}}class ot{static __wrap(t){const e=Object.create(ot.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawshapecontact_free(t)}distance(){return a.rawshapecontact_distance(this.ptr)}point1(){const t=a.rawpointprojection_point(this.ptr);return lt.__wrap(t)}point2(){const t=a.rawshapecontact_point2(this.ptr);return lt.__wrap(t)}normal1(){const t=a.rawshapecontact_normal1(this.ptr);return lt.__wrap(t)}normal2(){const t=a.rawshapecontact_normal2(this.ptr);return lt.__wrap(t)}}class ct{static __wrap(t){const e=Object.create(ct.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawshapetoi_free(t)}toi(){return a.rawintegrationparameters_dt(this.ptr)}witness1(){const t=a.rawrayintersection_normal(this.ptr);return lt.__wrap(t)}witness2(){const t=a.rawshapetoi_witness2(this.ptr);return lt.__wrap(t)}normal1(){const t=a.rawshapetoi_normal1(this.ptr);return lt.__wrap(t)}normal2(){const t=a.rawshapetoi_normal2(this.ptr);return lt.__wrap(t)}}class lt{static __wrap(t){const e=Object.create(lt.prototype);return e.ptr=t,e}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();a.__wbg_rawvector_free(t)}static zero(){const t=a.rawvector_zero();return lt.__wrap(t)}constructor(t,e,r){const i=a.rawvector_new(t,e,r);return lt.__wrap(i)}get x(){return a.rawintegrationparameters_dt(this.ptr)}set x(t){a.rawintegrationparameters_set_dt(this.ptr,t)}get y(){return a.rawrotation_y(this.ptr)}set y(t){a.rawvector_set_y(this.ptr,t)}get z(){return a.rawintegrationparameters_erp(this.ptr)}set z(t){a.rawintegrationparameters_set_erp(this.ptr,t)}xyz(){const t=a.rawvector_xyz(this.ptr);return lt.__wrap(t)}yxz(){const t=a.rawvector_yxz(this.ptr);return lt.__wrap(t)}zxy(){const t=a.rawvector_zxy(this.ptr);return lt.__wrap(t)}xzy(){const t=a.rawvector_xzy(this.ptr);return lt.__wrap(t)}yzx(){const t=a.rawvector_yzx(this.ptr);return lt.__wrap(t)}zyx(){const t=a.rawvector_zyx(this.ptr);return lt.__wrap(t)}}function ht(t){d(t)}function dt(t){return u(t)}function ut(t,e){const r=c(e),i="number"==typeof r?r:void 0;_()[t/8+1]=p(i)?0:i,f()[t/4+0]=!p(i)}function pt(t){const e=c(t);return"boolean"==typeof e?e?1:0:2}function wt(t){return u($.__wrap(t))}function _t(t){return"function"==typeof c(t)}function yt(){return z((function(t,e,r){return u(c(t).call(c(e),c(r)))}),arguments)}function ft(){return z((function(t,e,r,i){return u(c(t).call(c(e),c(r),c(i)))}),arguments)}function mt(){return z((function(t,e,r,i,n){return u(c(t).call(c(e),c(r),c(i),c(n)))}),arguments)}function bt(t,e,r,i){return u(c(t).bind(c(e),c(r),c(i)))}function gt(t){return u(c(t).buffer)}function Rt(t,e,r){return u(new Uint8Array(c(t),e>>>0,r>>>0))}function vt(t){return u(new Uint8Array(c(t)))}function St(t,e,r){c(t).set(c(e),r>>>0)}function Ct(t){return c(t).length}function Tt(t,e,r){return u(new Float32Array(c(t),e>>>0,r>>>0))}function It(t,e,r){c(t).set(c(e),r>>>0)}function xt(t){return c(t).length}function At(t){return u(new Float32Array(t>>>0))}function Pt(t,e){throw new Error(g(t,e))}function jt(){return u(a.memory)}n()}catch(Et){n(Et)}}))},3502:(t,e,r)=>{r.a(t,(async(i,n)=>{try{var a,s=i([a=r(2184)]),[a]=s.then?(await s)():s;await r.v(e,t.id,"d28c865646ac4499d405",{"./rapier_wasm3d_bg.js":{__wbindgen_object_drop_ref:a.ug,__wbindgen_number_new:a.pT,__wbindgen_number_get:a.M1,__wbindgen_boolean_get:a.HT,__wbg_rawraycolliderintersection_new:a.Ne,__wbindgen_is_function:a.o$,__wbg_call_3ed288a247f13ea5:a.ry,__wbg_call_a19d3173f3e1d3c5:a.dm,__wbg_call_6ed7121cfb42cfed:a.n_,__wbg_bind_c09a1641c1580c07:a.eG,__wbg_buffer_7af23f65f6c64548:a.EF,__wbg_newwithbyteoffsetandlength_ce1e75f0ce5f7974:a.VR,__wbg_new_cc9018bd6f283b6f:a.cb,__wbg_set_f25e869e4565d2a2:a.Ip,__wbg_length_0acb1cf9bbaf8519:a.Oo,__wbg_newwithbyteoffsetandlength_3f554978d8793b14:a.XJ,__wbg_set_9a9604c6888f6468:a.Dl,__wbg_length_371cc1c92aa8feae:a.oQ,__wbg_newwithlength_e538258cb2a6bad0:a._F,__wbindgen_throw:a.Or,__wbindgen_memory:a.oH}}),n()}catch(t){n(t)}}),1)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,